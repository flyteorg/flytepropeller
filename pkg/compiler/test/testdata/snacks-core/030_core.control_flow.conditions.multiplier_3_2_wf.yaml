workflow:
  id:
    name: core.control_flow.conditions.multiplier_3
    resource_type: 2
  interface:
    inputs:
      variables:
        my_input:
          description: my_input
          type:
            Type:
              Simple: 2
    outputs:
      variables:
        o0:
          description: o0
          type:
            Type:
              Simple: 2
  metadata: {}
  metadata_defaults: {}
  nodes:
  - Target:
      BranchNode:
        if_else:
          Default:
            Error:
              failed_node_id: fractions
              message: The input must be between 0 and 10
          case:
            condition:
              Expr:
                Conjunction:
                  left_expression:
                    Expr:
                      Comparison:
                        left_value:
                          Val:
                            Var: .my_input
                        operator: 2
                        right_value:
                          Val:
                            Primitive:
                              Value:
                                FloatValue: 0.1
                  right_expression:
                    Expr:
                      Comparison:
                        left_value:
                          Val:
                            Var: .my_input
                        operator: 4
                        right_value:
                          Val:
                            Primitive:
                              Value:
                                FloatValue: 1
            then_node:
              Target:
                TaskNode:
                  Reference:
                    ReferenceId:
                      name: core.control_flow.conditions.double
                      resource_type: 1
                  overrides: {}
              id: n0
              inputs:
              - binding:
                  Value:
                    Promise:
                      var: my_input
                var: "n"
              metadata:
                InterruptibleValue: null
                name: double
                retries: {}
          other:
          - condition:
              Expr:
                Conjunction:
                  left_expression:
                    Expr:
                      Comparison:
                        left_value:
                          Val:
                            Var: .my_input
                        operator: 2
                        right_value:
                          Val:
                            Primitive:
                              Value:
                                FloatValue: 1
                  right_expression:
                    Expr:
                      Comparison:
                        left_value:
                          Val:
                            Var: .my_input
                        operator: 4
                        right_value:
                          Val:
                            Primitive:
                              Value:
                                FloatValue: 10
            then_node:
              Target:
                TaskNode:
                  Reference:
                    ReferenceId:
                      name: core.control_flow.conditions.square
                      resource_type: 1
                  overrides: {}
              id: n1
              inputs:
              - binding:
                  Value:
                    Promise:
                      var: my_input
                var: "n"
              metadata:
                InterruptibleValue: null
                name: square
                retries: {}
    id: n0
    inputs:
    - binding:
        Value:
          Promise:
            var: my_input
      var: .my_input
    metadata:
      InterruptibleValue: null
      name: fractions
      retries: {}
  - Target:
      TaskNode:
        Reference:
          ReferenceId:
            name: core.control_flow.conditions.double
            resource_type: 1
        overrides: {}
    id: n1
    inputs:
    - binding:
        Value:
          Promise:
            node_id: n0
            var: o0
      var: "n"
    metadata:
      InterruptibleValue: null
      name: double
      retries: {}
    upstream_node_ids:
    - n0
  outputs:
  - binding:
      Value:
        Promise:
          node_id: n1
          var: o0
    var: o0
