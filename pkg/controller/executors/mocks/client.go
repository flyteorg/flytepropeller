// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	cache "sigs.k8s.io/controller-runtime/pkg/cache"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_GetCache struct {
	*mock.Call
}

func (_m Client_GetCache) Return(_a0 cache.Cache) *Client_GetCache {
	return &Client_GetCache{Call: _m.Call.Return(_a0)}
}

func (_m *Client) OnGetCache() *Client_GetCache {
	c_call := _m.On("GetCache")
	return &Client_GetCache{Call: c_call}
}

func (_m *Client) OnGetCacheMatch(matchers ...interface{}) *Client_GetCache {
	c_call := _m.On("GetCache", matchers...)
	return &Client_GetCache{Call: c_call}
}

// GetCache provides a mock function with given fields:
func (_m *Client) GetCache() cache.Cache {
	ret := _m.Called()

	var r0 cache.Cache
	if rf, ok := ret.Get(0).(func() cache.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Cache)
		}
	}

	return r0
}

type Client_GetClient struct {
	*mock.Call
}

func (_m Client_GetClient) Return(_a0 client.Client) *Client_GetClient {
	return &Client_GetClient{Call: _m.Call.Return(_a0)}
}

func (_m *Client) OnGetClient() *Client_GetClient {
	c_call := _m.On("GetClient")
	return &Client_GetClient{Call: c_call}
}

func (_m *Client) OnGetClientMatch(matchers ...interface{}) *Client_GetClient {
	c_call := _m.On("GetClient", matchers...)
	return &Client_GetClient{Call: c_call}
}

// GetClient provides a mock function with given fields:
func (_m *Client) GetClient() client.Client {
	ret := _m.Called()

	var r0 client.Client
	if rf, ok := ret.Get(0).(func() client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}
