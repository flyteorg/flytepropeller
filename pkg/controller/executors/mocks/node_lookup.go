// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// NodeLookup is an autogenerated mock type for the NodeLookup type
type NodeLookup struct {
	mock.Mock
}

type NodeLookup_FromNode struct {
	*mock.Call
}

func (_m NodeLookup_FromNode) Return(_a0 []string, _a1 error) *NodeLookup_FromNode {
	return &NodeLookup_FromNode{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *NodeLookup) OnFromNode(id string) *NodeLookup_FromNode {
	c_call := _m.On("FromNode", id)
	return &NodeLookup_FromNode{Call: c_call}
}

func (_m *NodeLookup) OnFromNodeMatch(matchers ...interface{}) *NodeLookup_FromNode {
	c_call := _m.On("FromNode", matchers...)
	return &NodeLookup_FromNode{Call: c_call}
}

// FromNode provides a mock function with given fields: id
func (_m *NodeLookup) FromNode(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NodeLookup_GetNode struct {
	*mock.Call
}

func (_m NodeLookup_GetNode) Return(_a0 v1alpha1.ExecutableNode, _a1 bool) *NodeLookup_GetNode {
	return &NodeLookup_GetNode{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *NodeLookup) OnGetNode(nodeID string) *NodeLookup_GetNode {
	c_call := _m.On("GetNode", nodeID)
	return &NodeLookup_GetNode{Call: c_call}
}

func (_m *NodeLookup) OnGetNodeMatch(matchers ...interface{}) *NodeLookup_GetNode {
	c_call := _m.On("GetNode", matchers...)
	return &NodeLookup_GetNode{Call: c_call}
}

// GetNode provides a mock function with given fields: nodeID
func (_m *NodeLookup) GetNode(nodeID string) (v1alpha1.ExecutableNode, bool) {
	ret := _m.Called(nodeID)

	var r0 v1alpha1.ExecutableNode
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableNode); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

type NodeLookup_GetNodeExecutionStatus struct {
	*mock.Call
}

func (_m NodeLookup_GetNodeExecutionStatus) Return(_a0 v1alpha1.ExecutableNodeStatus) *NodeLookup_GetNodeExecutionStatus {
	return &NodeLookup_GetNodeExecutionStatus{Call: _m.Call.Return(_a0)}
}

func (_m *NodeLookup) OnGetNodeExecutionStatus(ctx context.Context, id string) *NodeLookup_GetNodeExecutionStatus {
	c_call := _m.On("GetNodeExecutionStatus", ctx, id)
	return &NodeLookup_GetNodeExecutionStatus{Call: c_call}
}

func (_m *NodeLookup) OnGetNodeExecutionStatusMatch(matchers ...interface{}) *NodeLookup_GetNodeExecutionStatus {
	c_call := _m.On("GetNodeExecutionStatus", matchers...)
	return &NodeLookup_GetNodeExecutionStatus{Call: c_call}
}

// GetNodeExecutionStatus provides a mock function with given fields: ctx, id
func (_m *NodeLookup) GetNodeExecutionStatus(ctx context.Context, id string) v1alpha1.ExecutableNodeStatus {
	ret := _m.Called(ctx, id)

	var r0 v1alpha1.ExecutableNodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) v1alpha1.ExecutableNodeStatus); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNodeStatus)
		}
	}

	return r0
}

type NodeLookup_ToNode struct {
	*mock.Call
}

func (_m NodeLookup_ToNode) Return(_a0 []string, _a1 error) *NodeLookup_ToNode {
	return &NodeLookup_ToNode{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *NodeLookup) OnToNode(id string) *NodeLookup_ToNode {
	c_call := _m.On("ToNode", id)
	return &NodeLookup_ToNode{Call: c_call}
}

func (_m *NodeLookup) OnToNodeMatch(matchers ...interface{}) *NodeLookup_ToNode {
	c_call := _m.On("ToNode", matchers...)
	return &NodeLookup_ToNode{Call: c_call}
}

// ToNode provides a mock function with given fields: id
func (_m *NodeLookup) ToNode(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
