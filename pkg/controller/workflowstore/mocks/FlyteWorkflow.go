// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	workflowstore "github.com/flyteorg/flytepropeller/pkg/controller/workflowstore"
)

// FlyteWorkflow is an autogenerated mock type for the FlyteWorkflow type
type FlyteWorkflow struct {
	mock.Mock
}

type FlyteWorkflow_Get struct {
	*mock.Call
}

func (_m FlyteWorkflow_Get) Return(_a0 *v1alpha1.FlyteWorkflow, _a1 error) *FlyteWorkflow_Get {
	return &FlyteWorkflow_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FlyteWorkflow) OnGet(ctx context.Context, namespace string, name string) *FlyteWorkflow_Get {
	c_call := _m.On("Get", ctx, namespace, name)
	return &FlyteWorkflow_Get{Call: c_call}
}

func (_m *FlyteWorkflow) OnGetMatch(matchers ...interface{}) *FlyteWorkflow_Get {
	c_call := _m.On("Get", matchers...)
	return &FlyteWorkflow_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, namespace, name
func (_m *FlyteWorkflow) Get(ctx context.Context, namespace string, name string) (*v1alpha1.FlyteWorkflow, error) {
	ret := _m.Called(ctx, namespace, name)

	var r0 *v1alpha1.FlyteWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.FlyteWorkflow); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.FlyteWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FlyteWorkflow_Update struct {
	*mock.Call
}

func (_m FlyteWorkflow_Update) Return(newWF *v1alpha1.FlyteWorkflow, err error) *FlyteWorkflow_Update {
	return &FlyteWorkflow_Update{Call: _m.Call.Return(newWF, err)}
}

func (_m *FlyteWorkflow) OnUpdate(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, priorityClass workflowstore.PriorityClass) *FlyteWorkflow_Update {
	c_call := _m.On("Update", ctx, workflow, priorityClass)
	return &FlyteWorkflow_Update{Call: c_call}
}

func (_m *FlyteWorkflow) OnUpdateMatch(matchers ...interface{}) *FlyteWorkflow_Update {
	c_call := _m.On("Update", matchers...)
	return &FlyteWorkflow_Update{Call: c_call}
}

// Update provides a mock function with given fields: ctx, workflow, priorityClass
func (_m *FlyteWorkflow) Update(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, priorityClass workflowstore.PriorityClass) (*v1alpha1.FlyteWorkflow, error) {
	ret := _m.Called(ctx, workflow, priorityClass)

	var r0 *v1alpha1.FlyteWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow, workflowstore.PriorityClass) *v1alpha1.FlyteWorkflow); ok {
		r0 = rf(ctx, workflow, priorityClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.FlyteWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.FlyteWorkflow, workflowstore.PriorityClass) error); ok {
		r1 = rf(ctx, workflow, priorityClass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FlyteWorkflow_UpdateStatus struct {
	*mock.Call
}

func (_m FlyteWorkflow_UpdateStatus) Return(newWF *v1alpha1.FlyteWorkflow, err error) *FlyteWorkflow_UpdateStatus {
	return &FlyteWorkflow_UpdateStatus{Call: _m.Call.Return(newWF, err)}
}

func (_m *FlyteWorkflow) OnUpdateStatus(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, priorityClass workflowstore.PriorityClass) *FlyteWorkflow_UpdateStatus {
	c_call := _m.On("UpdateStatus", ctx, workflow, priorityClass)
	return &FlyteWorkflow_UpdateStatus{Call: c_call}
}

func (_m *FlyteWorkflow) OnUpdateStatusMatch(matchers ...interface{}) *FlyteWorkflow_UpdateStatus {
	c_call := _m.On("UpdateStatus", matchers...)
	return &FlyteWorkflow_UpdateStatus{Call: c_call}
}

// UpdateStatus provides a mock function with given fields: ctx, workflow, priorityClass
func (_m *FlyteWorkflow) UpdateStatus(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, priorityClass workflowstore.PriorityClass) (*v1alpha1.FlyteWorkflow, error) {
	ret := _m.Called(ctx, workflow, priorityClass)

	var r0 *v1alpha1.FlyteWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow, workflowstore.PriorityClass) *v1alpha1.FlyteWorkflow); ok {
		r0 = rf(ctx, workflow, priorityClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.FlyteWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.FlyteWorkflow, workflowstore.PriorityClass) error); ok {
		r1 = rf(ctx, workflow, priorityClass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
