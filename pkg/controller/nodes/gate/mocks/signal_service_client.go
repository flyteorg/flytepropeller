// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SignalServiceClient is an autogenerated mock type for the SignalServiceClient type
type SignalServiceClient struct {
	mock.Mock
}

type SignalServiceClient_GetOrCreateSignal struct {
	*mock.Call
}

func (_m SignalServiceClient_GetOrCreateSignal) Return(_a0 *admin.Signal, _a1 error) *SignalServiceClient_GetOrCreateSignal {
	return &SignalServiceClient_GetOrCreateSignal{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SignalServiceClient) OnGetOrCreateSignal(ctx context.Context, in *admin.SignalGetOrCreateRequest, opts ...grpc.CallOption) *SignalServiceClient_GetOrCreateSignal {
	c_call := _m.On("GetOrCreateSignal", ctx, in, opts)
	return &SignalServiceClient_GetOrCreateSignal{Call: c_call}
}

func (_m *SignalServiceClient) OnGetOrCreateSignalMatch(matchers ...interface{}) *SignalServiceClient_GetOrCreateSignal {
	c_call := _m.On("GetOrCreateSignal", matchers...)
	return &SignalServiceClient_GetOrCreateSignal{Call: c_call}
}

// GetOrCreateSignal provides a mock function with given fields: ctx, in, opts
func (_m *SignalServiceClient) GetOrCreateSignal(ctx context.Context, in *admin.SignalGetOrCreateRequest, opts ...grpc.CallOption) (*admin.Signal, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.Signal
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SignalGetOrCreateRequest, ...grpc.CallOption) *admin.Signal); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Signal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.SignalGetOrCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type SignalServiceClient_ListSignals struct {
	*mock.Call
}

func (_m SignalServiceClient_ListSignals) Return(_a0 *admin.SignalList, _a1 error) *SignalServiceClient_ListSignals {
	return &SignalServiceClient_ListSignals{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SignalServiceClient) OnListSignals(ctx context.Context, in *admin.SignalListRequest, opts ...grpc.CallOption) *SignalServiceClient_ListSignals {
	c_call := _m.On("ListSignals", ctx, in, opts)
	return &SignalServiceClient_ListSignals{Call: c_call}
}

func (_m *SignalServiceClient) OnListSignalsMatch(matchers ...interface{}) *SignalServiceClient_ListSignals {
	c_call := _m.On("ListSignals", matchers...)
	return &SignalServiceClient_ListSignals{Call: c_call}
}

// ListSignals provides a mock function with given fields: ctx, in, opts
func (_m *SignalServiceClient) ListSignals(ctx context.Context, in *admin.SignalListRequest, opts ...grpc.CallOption) (*admin.SignalList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.SignalList
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SignalListRequest, ...grpc.CallOption) *admin.SignalList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SignalList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.SignalListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type SignalServiceClient_SetSignal struct {
	*mock.Call
}

func (_m SignalServiceClient_SetSignal) Return(_a0 *admin.SignalSetResponse, _a1 error) *SignalServiceClient_SetSignal {
	return &SignalServiceClient_SetSignal{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SignalServiceClient) OnSetSignal(ctx context.Context, in *admin.SignalSetRequest, opts ...grpc.CallOption) *SignalServiceClient_SetSignal {
	c_call := _m.On("SetSignal", ctx, in, opts)
	return &SignalServiceClient_SetSignal{Call: c_call}
}

func (_m *SignalServiceClient) OnSetSignalMatch(matchers ...interface{}) *SignalServiceClient_SetSignal {
	c_call := _m.On("SetSignal", matchers...)
	return &SignalServiceClient_SetSignal{Call: c_call}
}

// SetSignal provides a mock function with given fields: ctx, in, opts
func (_m *SignalServiceClient) SetSignal(ctx context.Context, in *admin.SignalSetRequest, opts ...grpc.CallOption) (*admin.SignalSetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.SignalSetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SignalSetRequest, ...grpc.CallOption) *admin.SignalSetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.SignalSetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.SignalSetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
