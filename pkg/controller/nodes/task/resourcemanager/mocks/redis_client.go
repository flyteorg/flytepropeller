// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RedisClient is an autogenerated mock type for the RedisClient type
type RedisClient struct {
	mock.Mock
}

type RedisClient_Ping struct {
	*mock.Call
}

func (_m RedisClient_Ping) Return(_a0 string, _a1 error) *RedisClient_Ping {
	return &RedisClient_Ping{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *RedisClient) OnPing() *RedisClient_Ping {
	c_call := _m.On("Ping")
	return &RedisClient_Ping{Call: c_call}
}

func (_m *RedisClient) OnPingMatch(matchers ...interface{}) *RedisClient_Ping {
	c_call := _m.On("Ping", matchers...)
	return &RedisClient_Ping{Call: c_call}
}

// Ping provides a mock function with given fields:
func (_m *RedisClient) Ping() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type RedisClient_SAdd struct {
	*mock.Call
}

func (_m RedisClient_SAdd) Return(_a0 int64, _a1 error) *RedisClient_SAdd {
	return &RedisClient_SAdd{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *RedisClient) OnSAdd(_a0 string, _a1 interface{}) *RedisClient_SAdd {
	c_call := _m.On("SAdd", _a0, _a1)
	return &RedisClient_SAdd{Call: c_call}
}

func (_m *RedisClient) OnSAddMatch(matchers ...interface{}) *RedisClient_SAdd {
	c_call := _m.On("SAdd", matchers...)
	return &RedisClient_SAdd{Call: c_call}
}

// SAdd provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SAdd(_a0 string, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type RedisClient_SCard struct {
	*mock.Call
}

func (_m RedisClient_SCard) Return(_a0 int64, _a1 error) *RedisClient_SCard {
	return &RedisClient_SCard{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *RedisClient) OnSCard(_a0 string) *RedisClient_SCard {
	c_call := _m.On("SCard", _a0)
	return &RedisClient_SCard{Call: c_call}
}

func (_m *RedisClient) OnSCardMatch(matchers ...interface{}) *RedisClient_SCard {
	c_call := _m.On("SCard", matchers...)
	return &RedisClient_SCard{Call: c_call}
}

// SCard provides a mock function with given fields: _a0
func (_m *RedisClient) SCard(_a0 string) (int64, error) {
	ret := _m.Called(_a0)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type RedisClient_SIsMember struct {
	*mock.Call
}

func (_m RedisClient_SIsMember) Return(_a0 bool, _a1 error) *RedisClient_SIsMember {
	return &RedisClient_SIsMember{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *RedisClient) OnSIsMember(_a0 string, _a1 interface{}) *RedisClient_SIsMember {
	c_call := _m.On("SIsMember", _a0, _a1)
	return &RedisClient_SIsMember{Call: c_call}
}

func (_m *RedisClient) OnSIsMemberMatch(matchers ...interface{}) *RedisClient_SIsMember {
	c_call := _m.On("SIsMember", matchers...)
	return &RedisClient_SIsMember{Call: c_call}
}

// SIsMember provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SIsMember(_a0 string, _a1 interface{}) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, interface{}) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type RedisClient_SMembers struct {
	*mock.Call
}

func (_m RedisClient_SMembers) Return(_a0 []string, _a1 error) *RedisClient_SMembers {
	return &RedisClient_SMembers{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *RedisClient) OnSMembers(_a0 string) *RedisClient_SMembers {
	c_call := _m.On("SMembers", _a0)
	return &RedisClient_SMembers{Call: c_call}
}

func (_m *RedisClient) OnSMembersMatch(matchers ...interface{}) *RedisClient_SMembers {
	c_call := _m.On("SMembers", matchers...)
	return &RedisClient_SMembers{Call: c_call}
}

// SMembers provides a mock function with given fields: _a0
func (_m *RedisClient) SMembers(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type RedisClient_SRem struct {
	*mock.Call
}

func (_m RedisClient_SRem) Return(_a0 int64, _a1 error) *RedisClient_SRem {
	return &RedisClient_SRem{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *RedisClient) OnSRem(_a0 string, _a1 interface{}) *RedisClient_SRem {
	c_call := _m.On("SRem", _a0, _a1)
	return &RedisClient_SRem{Call: c_call}
}

func (_m *RedisClient) OnSRemMatch(matchers ...interface{}) *RedisClient_SRem {
	c_call := _m.On("SRem", matchers...)
	return &RedisClient_SRem{Call: c_call}
}

// SRem provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SRem(_a0 string, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
