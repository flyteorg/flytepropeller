// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"

	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

type Reader_GetLaunchPlan struct {
	*mock.Call
}

func (_m Reader_GetLaunchPlan) Return(_a0 *admin.LaunchPlan, _a1 error) *Reader_GetLaunchPlan {
	return &Reader_GetLaunchPlan{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Reader) OnGetLaunchPlan(ctx context.Context, launchPlanRef *core.Identifier) *Reader_GetLaunchPlan {
	c_call := _m.On("GetLaunchPlan", ctx, launchPlanRef)
	return &Reader_GetLaunchPlan{Call: c_call}
}

func (_m *Reader) OnGetLaunchPlanMatch(matchers ...interface{}) *Reader_GetLaunchPlan {
	c_call := _m.On("GetLaunchPlan", matchers...)
	return &Reader_GetLaunchPlan{Call: c_call}
}

// GetLaunchPlan provides a mock function with given fields: ctx, launchPlanRef
func (_m *Reader) GetLaunchPlan(ctx context.Context, launchPlanRef *core.Identifier) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, launchPlanRef)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, *core.Identifier) *admin.LaunchPlan); ok {
		r0 = rf(ctx, launchPlanRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.Identifier) error); ok {
		r1 = rf(ctx, launchPlanRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
