// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	handler "github.com/flyteorg/flytepropeller/pkg/controller/nodes/handler"
	mock "github.com/stretchr/testify/mock"
)

// NodeStateReader is an autogenerated mock type for the NodeStateReader type
type NodeStateReader struct {
	mock.Mock
}

type NodeStateReader_GetBranchNode struct {
	*mock.Call
}

func (_m NodeStateReader_GetBranchNode) Return(_a0 handler.BranchNodeState) *NodeStateReader_GetBranchNode {
	return &NodeStateReader_GetBranchNode{Call: _m.Call.Return(_a0)}
}

func (_m *NodeStateReader) OnGetBranchNode() *NodeStateReader_GetBranchNode {
	c_call := _m.On("GetBranchNode")
	return &NodeStateReader_GetBranchNode{Call: c_call}
}

func (_m *NodeStateReader) OnGetBranchNodeMatch(matchers ...interface{}) *NodeStateReader_GetBranchNode {
	c_call := _m.On("GetBranchNode", matchers...)
	return &NodeStateReader_GetBranchNode{Call: c_call}
}

// GetBranchNode provides a mock function with given fields:
func (_m *NodeStateReader) GetBranchNode() handler.BranchNodeState {
	ret := _m.Called()

	var r0 handler.BranchNodeState
	if rf, ok := ret.Get(0).(func() handler.BranchNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.BranchNodeState)
	}

	return r0
}

type NodeStateReader_GetDynamicNodeState struct {
	*mock.Call
}

func (_m NodeStateReader_GetDynamicNodeState) Return(_a0 handler.DynamicNodeState) *NodeStateReader_GetDynamicNodeState {
	return &NodeStateReader_GetDynamicNodeState{Call: _m.Call.Return(_a0)}
}

func (_m *NodeStateReader) OnGetDynamicNodeState() *NodeStateReader_GetDynamicNodeState {
	c_call := _m.On("GetDynamicNodeState")
	return &NodeStateReader_GetDynamicNodeState{Call: c_call}
}

func (_m *NodeStateReader) OnGetDynamicNodeStateMatch(matchers ...interface{}) *NodeStateReader_GetDynamicNodeState {
	c_call := _m.On("GetDynamicNodeState", matchers...)
	return &NodeStateReader_GetDynamicNodeState{Call: c_call}
}

// GetDynamicNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetDynamicNodeState() handler.DynamicNodeState {
	ret := _m.Called()

	var r0 handler.DynamicNodeState
	if rf, ok := ret.Get(0).(func() handler.DynamicNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.DynamicNodeState)
	}

	return r0
}

type NodeStateReader_GetGateNodeState struct {
	*mock.Call
}

func (_m NodeStateReader_GetGateNodeState) Return(_a0 handler.GateNodeState) *NodeStateReader_GetGateNodeState {
	return &NodeStateReader_GetGateNodeState{Call: _m.Call.Return(_a0)}
}

func (_m *NodeStateReader) OnGetGateNodeState() *NodeStateReader_GetGateNodeState {
	c_call := _m.On("GetGateNodeState")
	return &NodeStateReader_GetGateNodeState{Call: c_call}
}

func (_m *NodeStateReader) OnGetGateNodeStateMatch(matchers ...interface{}) *NodeStateReader_GetGateNodeState {
	c_call := _m.On("GetGateNodeState", matchers...)
	return &NodeStateReader_GetGateNodeState{Call: c_call}
}

// GetGateNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetGateNodeState() handler.GateNodeState {
	ret := _m.Called()

	var r0 handler.GateNodeState
	if rf, ok := ret.Get(0).(func() handler.GateNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.GateNodeState)
	}

	return r0
}

type NodeStateReader_GetTaskNodeState struct {
	*mock.Call
}

func (_m NodeStateReader_GetTaskNodeState) Return(_a0 handler.TaskNodeState) *NodeStateReader_GetTaskNodeState {
	return &NodeStateReader_GetTaskNodeState{Call: _m.Call.Return(_a0)}
}

func (_m *NodeStateReader) OnGetTaskNodeState() *NodeStateReader_GetTaskNodeState {
	c_call := _m.On("GetTaskNodeState")
	return &NodeStateReader_GetTaskNodeState{Call: c_call}
}

func (_m *NodeStateReader) OnGetTaskNodeStateMatch(matchers ...interface{}) *NodeStateReader_GetTaskNodeState {
	c_call := _m.On("GetTaskNodeState", matchers...)
	return &NodeStateReader_GetTaskNodeState{Call: c_call}
}

// GetTaskNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetTaskNodeState() handler.TaskNodeState {
	ret := _m.Called()

	var r0 handler.TaskNodeState
	if rf, ok := ret.Get(0).(func() handler.TaskNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.TaskNodeState)
	}

	return r0
}

type NodeStateReader_GetWorkflowNodeState struct {
	*mock.Call
}

func (_m NodeStateReader_GetWorkflowNodeState) Return(_a0 handler.WorkflowNodeState) *NodeStateReader_GetWorkflowNodeState {
	return &NodeStateReader_GetWorkflowNodeState{Call: _m.Call.Return(_a0)}
}

func (_m *NodeStateReader) OnGetWorkflowNodeState() *NodeStateReader_GetWorkflowNodeState {
	c_call := _m.On("GetWorkflowNodeState")
	return &NodeStateReader_GetWorkflowNodeState{Call: c_call}
}

func (_m *NodeStateReader) OnGetWorkflowNodeStateMatch(matchers ...interface{}) *NodeStateReader_GetWorkflowNodeState {
	c_call := _m.On("GetWorkflowNodeState", matchers...)
	return &NodeStateReader_GetWorkflowNodeState{Call: c_call}
}

// GetWorkflowNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetWorkflowNodeState() handler.WorkflowNodeState {
	ret := _m.Called()

	var r0 handler.WorkflowNodeState
	if rf, ok := ret.Get(0).(func() handler.WorkflowNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.WorkflowNodeState)
	}

	return r0
}
