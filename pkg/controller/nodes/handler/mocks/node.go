// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	handler "github.com/flyteorg/flytepropeller/pkg/controller/nodes/handler"
	mock "github.com/stretchr/testify/mock"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

type Node_Abort struct {
	*mock.Call
}

func (_m Node_Abort) Return(_a0 error) *Node_Abort {
	return &Node_Abort{Call: _m.Call.Return(_a0)}
}

func (_m *Node) OnAbort(ctx context.Context, executionContext handler.NodeExecutionContext, reason string) *Node_Abort {
	c_call := _m.On("Abort", ctx, executionContext, reason)
	return &Node_Abort{Call: c_call}
}

func (_m *Node) OnAbortMatch(matchers ...interface{}) *Node_Abort {
	c_call := _m.On("Abort", matchers...)
	return &Node_Abort{Call: c_call}
}

// Abort provides a mock function with given fields: ctx, executionContext, reason
func (_m *Node) Abort(ctx context.Context, executionContext handler.NodeExecutionContext, reason string) error {
	ret := _m.Called(ctx, executionContext, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, handler.NodeExecutionContext, string) error); ok {
		r0 = rf(ctx, executionContext, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Node_Finalize struct {
	*mock.Call
}

func (_m Node_Finalize) Return(_a0 error) *Node_Finalize {
	return &Node_Finalize{Call: _m.Call.Return(_a0)}
}

func (_m *Node) OnFinalize(ctx context.Context, executionContext handler.NodeExecutionContext) *Node_Finalize {
	c_call := _m.On("Finalize", ctx, executionContext)
	return &Node_Finalize{Call: c_call}
}

func (_m *Node) OnFinalizeMatch(matchers ...interface{}) *Node_Finalize {
	c_call := _m.On("Finalize", matchers...)
	return &Node_Finalize{Call: c_call}
}

// Finalize provides a mock function with given fields: ctx, executionContext
func (_m *Node) Finalize(ctx context.Context, executionContext handler.NodeExecutionContext) error {
	ret := _m.Called(ctx, executionContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, handler.NodeExecutionContext) error); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Node_FinalizeRequired struct {
	*mock.Call
}

func (_m Node_FinalizeRequired) Return(_a0 bool) *Node_FinalizeRequired {
	return &Node_FinalizeRequired{Call: _m.Call.Return(_a0)}
}

func (_m *Node) OnFinalizeRequired() *Node_FinalizeRequired {
	c_call := _m.On("FinalizeRequired")
	return &Node_FinalizeRequired{Call: c_call}
}

func (_m *Node) OnFinalizeRequiredMatch(matchers ...interface{}) *Node_FinalizeRequired {
	c_call := _m.On("FinalizeRequired", matchers...)
	return &Node_FinalizeRequired{Call: c_call}
}

// FinalizeRequired provides a mock function with given fields:
func (_m *Node) FinalizeRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type Node_Handle struct {
	*mock.Call
}

func (_m Node_Handle) Return(_a0 handler.Transition, _a1 error) *Node_Handle {
	return &Node_Handle{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Node) OnHandle(ctx context.Context, executionContext handler.NodeExecutionContext) *Node_Handle {
	c_call := _m.On("Handle", ctx, executionContext)
	return &Node_Handle{Call: c_call}
}

func (_m *Node) OnHandleMatch(matchers ...interface{}) *Node_Handle {
	c_call := _m.On("Handle", matchers...)
	return &Node_Handle{Call: c_call}
}

// Handle provides a mock function with given fields: ctx, executionContext
func (_m *Node) Handle(ctx context.Context, executionContext handler.NodeExecutionContext) (handler.Transition, error) {
	ret := _m.Called(ctx, executionContext)

	var r0 handler.Transition
	if rf, ok := ret.Get(0).(func(context.Context, handler.NodeExecutionContext) handler.Transition); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Get(0).(handler.Transition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, handler.NodeExecutionContext) error); ok {
		r1 = rf(ctx, executionContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Node_Setup struct {
	*mock.Call
}

func (_m Node_Setup) Return(_a0 error) *Node_Setup {
	return &Node_Setup{Call: _m.Call.Return(_a0)}
}

func (_m *Node) OnSetup(ctx context.Context, setupContext handler.SetupContext) *Node_Setup {
	c_call := _m.On("Setup", ctx, setupContext)
	return &Node_Setup{Call: c_call}
}

func (_m *Node) OnSetupMatch(matchers ...interface{}) *Node_Setup {
	c_call := _m.On("Setup", matchers...)
	return &Node_Setup{Call: c_call}
}

// Setup provides a mock function with given fields: ctx, setupContext
func (_m *Node) Setup(ctx context.Context, setupContext handler.SetupContext) error {
	ret := _m.Called(ctx, setupContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, handler.SetupContext) error); ok {
		r0 = rf(ctx, setupContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
