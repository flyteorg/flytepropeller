// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flytestdlib/storage"
)

// WorkflowClosureStore is an autogenerated mock type for the WorkflowClosureStore type
type WorkflowClosureStore struct {
	mock.Mock
}

type WorkflowClosureStore_Get struct {
	*mock.Call
}

func (_m WorkflowClosureStore_Get) Return(_a0 *core.CompiledWorkflowClosure, _a1 error) *WorkflowClosureStore_Get {
	return &WorkflowClosureStore_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *WorkflowClosureStore) OnGet(ctx context.Context, dataReference storage.DataReference) *WorkflowClosureStore_Get {
	c_call := _m.On("Get", ctx, dataReference)
	return &WorkflowClosureStore_Get{Call: c_call}
}

func (_m *WorkflowClosureStore) OnGetMatch(matchers ...interface{}) *WorkflowClosureStore_Get {
	c_call := _m.On("Get", matchers...)
	return &WorkflowClosureStore_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, dataReference
func (_m *WorkflowClosureStore) Get(ctx context.Context, dataReference storage.DataReference) (*core.CompiledWorkflowClosure, error) {
	ret := _m.Called(ctx, dataReference)

	var r0 *core.CompiledWorkflowClosure
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) *core.CompiledWorkflowClosure); ok {
		r0 = rf(ctx, dataReference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflowClosure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.DataReference) error); ok {
		r1 = rf(ctx, dataReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type WorkflowClosureStore_Remove struct {
	*mock.Call
}

func (_m WorkflowClosureStore_Remove) Return(_a0 error) *WorkflowClosureStore_Remove {
	return &WorkflowClosureStore_Remove{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowClosureStore) OnRemove(ctx context.Context, dataReference storage.DataReference) *WorkflowClosureStore_Remove {
	c_call := _m.On("Remove", ctx, dataReference)
	return &WorkflowClosureStore_Remove{Call: c_call}
}

func (_m *WorkflowClosureStore) OnRemoveMatch(matchers ...interface{}) *WorkflowClosureStore_Remove {
	c_call := _m.On("Remove", matchers...)
	return &WorkflowClosureStore_Remove{Call: c_call}
}

// Remove provides a mock function with given fields: ctx, dataReference
func (_m *WorkflowClosureStore) Remove(ctx context.Context, dataReference storage.DataReference) error {
	ret := _m.Called(ctx, dataReference)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) error); ok {
		r0 = rf(ctx, dataReference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
