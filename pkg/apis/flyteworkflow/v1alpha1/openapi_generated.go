//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Alias":                       schema_pkg_apis_flyteworkflow_v1alpha1_Alias(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Binding":                     schema_pkg_apis_flyteworkflow_v1alpha1_Binding(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BooleanExpression":           schema_pkg_apis_flyteworkflow_v1alpha1_BooleanExpression(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BranchNodeSpec":              schema_pkg_apis_flyteworkflow_v1alpha1_BranchNodeSpec(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BranchNodeStatus":            schema_pkg_apis_flyteworkflow_v1alpha1_BranchNodeStatus(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Connections":                 schema_pkg_apis_flyteworkflow_v1alpha1_Connections(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.DeprecatedConnections":       schema_pkg_apis_flyteworkflow_v1alpha1_DeprecatedConnections(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.DynamicNodeStatus":           schema_pkg_apis_flyteworkflow_v1alpha1_DynamicNodeStatus(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Error":                       schema_pkg_apis_flyteworkflow_v1alpha1_Error(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionConfig":             schema_pkg_apis_flyteworkflow_v1alpha1_ExecutionConfig(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError":              schema_pkg_apis_flyteworkflow_v1alpha1_ExecutionError(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.FlyteWorkflow":               schema_pkg_apis_flyteworkflow_v1alpha1_FlyteWorkflow(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.FlyteWorkflowList":           schema_pkg_apis_flyteworkflow_v1alpha1_FlyteWorkflowList(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Identifier":                  schema_pkg_apis_flyteworkflow_v1alpha1_Identifier(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.IfBlock":                     schema_pkg_apis_flyteworkflow_v1alpha1_IfBlock(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Inputs":                      schema_pkg_apis_flyteworkflow_v1alpha1_Inputs(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.MutableStruct":               schema_pkg_apis_flyteworkflow_v1alpha1_MutableStruct(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeDefaults":                schema_pkg_apis_flyteworkflow_v1alpha1_NodeDefaults(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeMetadata":                schema_pkg_apis_flyteworkflow_v1alpha1_NodeMetadata(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeSpec":                    schema_pkg_apis_flyteworkflow_v1alpha1_NodeSpec(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeStatus":                  schema_pkg_apis_flyteworkflow_v1alpha1_NodeStatus(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.OutputVarMap":                schema_pkg_apis_flyteworkflow_v1alpha1_OutputVarMap(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.RawOutputDataConfig":         schema_pkg_apis_flyteworkflow_v1alpha1_RawOutputDataConfig(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.RetryStrategy":               schema_pkg_apis_flyteworkflow_v1alpha1_RetryStrategy(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskExecutionIdentifier":     schema_pkg_apis_flyteworkflow_v1alpha1_TaskExecutionIdentifier(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskNodeStatus":              schema_pkg_apis_flyteworkflow_v1alpha1_TaskNodeStatus(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskPluginOverride":          schema_pkg_apis_flyteworkflow_v1alpha1_TaskPluginOverride(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResourceSpec":            schema_pkg_apis_flyteworkflow_v1alpha1_TaskResourceSpec(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResources":               schema_pkg_apis_flyteworkflow_v1alpha1_TaskResources(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskSpec":                    schema_pkg_apis_flyteworkflow_v1alpha1_TaskSpec(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowExecutionIdentifier": schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowExecutionIdentifier(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowMeta":                schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowMeta(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowNodeSpec":            schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowNodeSpec(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowNodeStatus":          schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowNodeStatus(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowSpec":                schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowSpec(ref),
		"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowStatus":              schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowStatus(ref),
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_Alias(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"var": {
						SchemaProps: spec.SchemaProps{
							Description: "Must match one of the output variable names on a node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"alias": {
						SchemaProps: spec.SchemaProps{
							Description: "A workflow-level unique alias that downstream nodes can refer to in their input.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_Binding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"Binding": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.Binding"),
						},
					},
				},
				Required: []string{"Binding"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.Binding"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_BooleanExpression(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"BooleanExpression": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.BooleanExpression"),
						},
					},
				},
				Required: []string{"BooleanExpression"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.BooleanExpression"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_BranchNodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"if": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.IfBlock"),
						},
					},
					"elseIf": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.IfBlock"),
									},
								},
							},
						},
					},
					"else": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"elseFail": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Error"),
						},
					},
				},
				Required: []string{"if"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Error", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.IfBlock"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_BranchNodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"finalNodeId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"phase", "finalNodeId"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_Connections(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Connections keep track of downstream and upstream dependencies (including data and execution dependencies).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"downstream": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
					"upstream": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
				},
				Required: []string{"downstream", "upstream"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_DeprecatedConnections(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Deprecated: Please use Connections instead",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"DownstreamEdges": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
					"UpstreamEdges": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_DynamicNodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError"),
						},
					},
				},
				Required: []string{"phase"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_Error(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_ExecutionConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "This contains workflow-execution specifications and overrides.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TaskPluginImpls": {
						SchemaProps: spec.SchemaProps{
							Description: "Maps individual task types to their alternate (non-default) plugin handlers by name.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskPluginOverride"),
									},
								},
							},
						},
					},
					"MaxParallelism": {
						SchemaProps: spec.SchemaProps{
							Description: "Can be used to control the number of parallel nodes to run within the workflow. This is useful to achieve fairness.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"RecoveryExecution": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines execution behavior for processing nodes.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowExecutionIdentifier"),
						},
					},
					"TaskResources": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the resource requests and limits specified for tasks run as part of this execution that ought to be applied at execution time.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResources"),
						},
					},
				},
				Required: []string{"TaskPluginImpls", "MaxParallelism", "RecoveryExecution", "TaskResources"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskPluginOverride", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResources", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowExecutionIdentifier"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_ExecutionError(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Wrapper around core.Execution error. Execution Error has a protobuf enum and hence needs to be wrapped by custom marshaller",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_FlyteWorkflow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlyteWorkflow: represents one Execution Workflow object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowSpec"),
						},
					},
					"workflowMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowMeta"),
						},
					},
					"inputs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Inputs"),
						},
					},
					"executionId": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowExecutionIdentifier"),
						},
					},
					"tasks": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskSpec"),
									},
								},
							},
						},
					},
					"subWorkflows": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowSpec"),
									},
								},
							},
						},
					},
					"activeDeadlineSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"node-defaults": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults value of parameters to be used for nodes if not set by the node.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeDefaults"),
						},
					},
					"acceptedAt": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the time when the workflow has been accepted into the system.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "[DEPRECATED] ServiceAccountName is the name of the ServiceAccount to use to run this pod. [DEPRECATED] More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ [DEPRECATED] +optional",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Security context fields to define privilege and access control settings",
							Ref:         ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.SecurityContext"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the only mutable section in the workflow. It holds all the execution information",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowStatus"),
						},
					},
					"rawOutputDataConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "RawOutputDataConfig defines the configurations to use for generating raw outputs (e.g. blobs, schemas).",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.RawOutputDataConfig"),
						},
					},
					"executionConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Workflow-execution specifications and overrides",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionConfig"),
						},
					},
				},
				Required: []string{"spec", "executionId", "tasks"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.SecurityContext", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionConfig", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Inputs", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeDefaults", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.RawOutputDataConfig", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskSpec", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowExecutionIdentifier", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowMeta", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowSpec", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_FlyteWorkflowList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlyteWorkflowList is a list of FlyteWorkflow resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.FlyteWorkflow"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.FlyteWorkflow", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_Identifier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_IfBlock(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BooleanExpression"),
						},
					},
					"then": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"condition", "then"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BooleanExpression"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_Inputs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_MutableStruct(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"isDirty": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"isDirty"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_NodeDefaults(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"interruptible": {
						SchemaProps: spec.SchemaProps{
							Description: "Default behaviour for Interruptible for nodes unless explicitly set at the node level.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_NodeMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "A friendly name for the Node",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeout": {
						SchemaProps: spec.SchemaProps{
							Description: "The overall timeout of a task.",
							Ref:         ref("google.golang.org/protobuf/types/known/durationpb.Duration"),
						},
					},
					"retries": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of retries per task.",
							Ref:         ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.RetryStrategy"),
						},
					},
					"InterruptibleValue": {
						SchemaProps: spec.SchemaProps{
							Description: "Identify whether node is interruptible\n\nTypes that are valid to be assigned to InterruptibleValue:\n\t*NodeMetadata_Interruptible",
							Ref:         ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.isNodeMetadata_InterruptibleValue"),
						},
					},
				},
				Required: []string{"InterruptibleValue"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.RetryStrategy", "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.isNodeMetadata_InterruptibleValue", "google.golang.org/protobuf/types/known/durationpb.Duration"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_NodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"branch": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BranchNodeSpec"),
						},
					},
					"task": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"workflow": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowNodeSpec"),
						},
					},
					"inputBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Binding"),
									},
								},
							},
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ConfigMap"),
						},
					},
					"retry": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.RetryStrategy"),
						},
					},
					"outputAlias": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Alias"),
									},
								},
							},
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type":       "atomic",
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"hostname": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subdomain": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"schedulerName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"executionDeadline": {
						SchemaProps: spec.SchemaProps{
							Description: "Node execution timeout",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"activeDeadline": {
						SchemaProps: spec.SchemaProps{
							Description: "StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer. This includes time spent waiting in the queue.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"interruptible": {
						SchemaProps: spec.SchemaProps{
							Description: "The value set to True means task is OK with getting interrupted",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"id", "kind"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Alias", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Binding", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BranchNodeSpec", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.RetryStrategy", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowNodeSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.ConfigMap", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"queuedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"startedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"stoppedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdatedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"laStartedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"attempts": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"systemFailures": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"cached": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"parentNode": {
						SchemaProps: spec.SchemaProps{
							Description: "This is useful only for branch nodes. If this is set, then it can be used to determine if execution can proceed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"branchStatus": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BranchNodeStatus"),
						},
					},
					"subNodeStatus": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeStatus"),
									},
								},
							},
						},
					},
					"workflowNodeStatus": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowNodeStatus"),
						},
					},
					"dynamicNodeStatus": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.DynamicNodeStatus"),
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Description: "In case of Failing/Failed Phase, an execution error can be optionally associated with the Node",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError"),
						},
					},
				},
				Required: []string{"phase"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.BranchNodeStatus", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.DynamicNodeStatus", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeStatus", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.WorkflowNodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_OutputVarMap(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"VariableMap": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.VariableMap"),
						},
					},
				},
				Required: []string{"VariableMap"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.VariableMap"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_RawOutputDataConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "This contains an OutputLocationPrefix. When running against AWS, this should be something of the form s3://my-bucket, or s3://my-bucket/  A sharding string will automatically be appended to this prefix before handing off to plugins/tasks. Sharding behavior may change in the future. Background available at https://github.com/flyteorg/flyte/issues/211",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_RetryStrategy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Strategy to be used to Retry a node that is in RetryableFailure state",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"minAttempts": {
						SchemaProps: spec.SchemaProps{
							Description: "MinAttempts implies the atleast n attempts to try this node before giving up. The atleast here is because we may fail to write the attempt information and end up retrying again. Also `0` and `1` both mean atleast one attempt will be done. 0 is a degenerate case.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"minAttempts"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_TaskExecutionIdentifier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_TaskNodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"phaseVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"pState": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
					"psv": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"tick": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"updAt": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "date-time",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_TaskPluginOverride(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"PluginsIDs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"MissingPluginBehavior": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"MissingPluginBehavior"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_TaskResourceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines a set of configurable resources of different types that a task can request or apply as limits.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"CPU": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"Memory": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"EphemeralStorage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"Storage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"GPU": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_TaskResources(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines the complete closure of compute resources a task can request and apply as limits.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Requests": {
						SchemaProps: spec.SchemaProps{
							Description: "If the node where a task is running has enough of a resource available, a container may use more resources than its request for that resource specifies.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResourceSpec"),
						},
					},
					"Limits": {
						SchemaProps: spec.SchemaProps{
							Description: "A hard limit, a task cannot consume resources greater than the limit specifies.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResourceSpec"),
						},
					},
				},
				Required: []string{"Requests", "Limits"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.TaskResourceSpec"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_TaskSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"TaskTemplate": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.TaskTemplate"),
						},
					},
				},
				Required: []string{"TaskTemplate"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.TaskTemplate"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowExecutionIdentifier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"eventVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowNodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"launchPlanRefId": {
						SchemaProps: spec.SchemaProps{
							Description: "Either one of the two",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Identifier"),
						},
					},
					"subWorkflowRef": {
						SchemaProps: spec.SchemaProps{
							Description: "We currently want the SubWorkflow to be completely contained in the node. this is because We use the node status to store the information of the execution. Important Note: This may cause a bloat in case we use the same SubWorkflow in multiple nodes. The recommended technique for that is to use launch plan refs. This is because we will end up executing the launch plan refs as disparate executions in Flyte propeller. This is potentially better as it prevents us from hitting the storage limit in etcd Workflow *WorkflowSpec `json:\"workflow,omitempty\"`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Identifier"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowNodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"executionError": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.ExecutionError"),
						},
					},
				},
				Required: []string{"phase", "executionError"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core.ExecutionError"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkflowSpec is the spec for the actual Flyte Workflow (DAG)",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeSpec"),
									},
								},
							},
						},
					},
					"connections": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the set of connections (both data dependencies and execution dependencies) that the graph is formed of. The execution engine will respect and follow these connections as it determines which nodes can and should be executed. Deprecated: Please use Connections",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.DeprecatedConnections"),
						},
					},
					"edges": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the set of connections (both data dependencies and execution dependencies) that the graph is formed of. The execution engine will respect and follow these connections as it determines which nodes can and should be executed.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Connections"),
						},
					},
					"onFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines a single node to execute in case the system determined the Workflow has failed.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeSpec"),
						},
					},
					"outputs": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the declaration of the outputs types and names this workflow is expected to generate.",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.OutputVarMap"),
						},
					},
					"outputBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Defines the data links used to construct the final outputs of the workflow. Bindings will typically refer to specific outputs of a subset of the nodes executed in the Workflow. When executing the end-node, the execution engine will traverse these bindings and assemble the final set of outputs of the workflow.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Binding"),
									},
								},
							},
						},
					},
					"onFailurePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the policy for handling failures whether it's to fail immediately, or let the nodes run to completion.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"id", "nodes", "connections", "edges"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Binding", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.Connections", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.DeprecatedConnections", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeSpec", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.OutputVarMap"},
	}
}

func schema_pkg_apis_flyteworkflow_v1alpha1_WorkflowStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"startedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"stoppedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdatedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dataDir": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"outputRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"nodeStatus": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeStatus"),
									},
								},
							},
						},
					},
					"failedAttempts": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of Attempts completed with rounds resulting in error. this is used to cap out poison pill workflows that spin in an error loop. The value should be set at the global level and will be enforced. At the end of the retries the workflow will fail",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Description: "Stores the Error during the Execution of the Workflow. It is optional and usually associated with Failing/Failed state only",
							Ref:         ref("github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError"),
						},
					},
				},
				Required: []string{"phase"},
			},
		},
		Dependencies: []string{
			"github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.ExecutionError", "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1.NodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
