// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/lyft/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableDynamicNodeStatus is an autogenerated mock type for the ExecutableDynamicNodeStatus type
type ExecutableDynamicNodeStatus struct {
	mock.Mock
}

type ExecutableDynamicNodeStatus_GetDynamicNodePhase struct {
	*mock.Call
}

func (_m ExecutableDynamicNodeStatus_GetDynamicNodePhase) Return(_a0 v1alpha1.DynamicNodePhase) *ExecutableDynamicNodeStatus_GetDynamicNodePhase {
	return &ExecutableDynamicNodeStatus_GetDynamicNodePhase{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableDynamicNodeStatus) OnGetDynamicNodePhase() *ExecutableDynamicNodeStatus_GetDynamicNodePhase {
	c := _m.On("GetDynamicNodePhase")
	return &ExecutableDynamicNodeStatus_GetDynamicNodePhase{Call: c}
}

func (_m *ExecutableDynamicNodeStatus) OnGetDynamicNodePhaseMatch(matchers ...interface{}) *ExecutableDynamicNodeStatus_GetDynamicNodePhase {
	c := _m.On("GetDynamicNodePhase", matchers...)
	return &ExecutableDynamicNodeStatus_GetDynamicNodePhase{Call: c}
}

// GetDynamicNodePhase provides a mock function with given fields:
func (_m *ExecutableDynamicNodeStatus) GetDynamicNodePhase() v1alpha1.DynamicNodePhase {
	ret := _m.Called()

	var r0 v1alpha1.DynamicNodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.DynamicNodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.DynamicNodePhase)
	}

	return r0
}

type ExecutableDynamicNodeStatus_GetDynamicNodeReason struct {
	*mock.Call
}

func (_m ExecutableDynamicNodeStatus_GetDynamicNodeReason) Return(_a0 string) *ExecutableDynamicNodeStatus_GetDynamicNodeReason {
	return &ExecutableDynamicNodeStatus_GetDynamicNodeReason{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableDynamicNodeStatus) OnGetDynamicNodeReason() *ExecutableDynamicNodeStatus_GetDynamicNodeReason {
	c := _m.On("GetDynamicNodeReason")
	return &ExecutableDynamicNodeStatus_GetDynamicNodeReason{Call: c}
}

func (_m *ExecutableDynamicNodeStatus) OnGetDynamicNodeReasonMatch(matchers ...interface{}) *ExecutableDynamicNodeStatus_GetDynamicNodeReason {
	c := _m.On("GetDynamicNodeReason", matchers...)
	return &ExecutableDynamicNodeStatus_GetDynamicNodeReason{Call: c}
}

// GetDynamicNodeReason provides a mock function with given fields:
func (_m *ExecutableDynamicNodeStatus) GetDynamicNodeReason() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
