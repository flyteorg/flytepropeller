// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// Meta is an autogenerated mock type for the Meta type
type WorkflowMeta struct {
	mock.Mock
}

type WorkflowMeta_GetAnnotations struct {
	*mock.Call
}

func (_m WorkflowMeta_GetAnnotations) Return(_a0 map[string]string) *WorkflowMeta_GetAnnotations {
	return &WorkflowMeta_GetAnnotations{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetAnnotations() *WorkflowMeta_GetAnnotations {
	c := _m.On("GetAnnotations")
	return &WorkflowMeta_GetAnnotations{Call: c}
}

func (_m *WorkflowMeta) OnGetAnnotationsMatch(matchers ...interface{}) *WorkflowMeta_GetAnnotations {
	c := _m.On("GetAnnotations", matchers...)
	return &WorkflowMeta_GetAnnotations{Call: c}
}

// GetAnnotations provides a mock function with given fields:
func (_m *WorkflowMeta) GetAnnotations() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type WorkflowMeta_GetCreationTimestamp struct {
	*mock.Call
}

func (_m WorkflowMeta_GetCreationTimestamp) Return(_a0 v1.Time) *WorkflowMeta_GetCreationTimestamp {
	return &WorkflowMeta_GetCreationTimestamp{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetCreationTimestamp() *WorkflowMeta_GetCreationTimestamp {
	c := _m.On("GetCreationTimestamp")
	return &WorkflowMeta_GetCreationTimestamp{Call: c}
}

func (_m *WorkflowMeta) OnGetCreationTimestampMatch(matchers ...interface{}) *WorkflowMeta_GetCreationTimestamp {
	c := _m.On("GetCreationTimestamp", matchers...)
	return &WorkflowMeta_GetCreationTimestamp{Call: c}
}

// GetCreationTimestamp provides a mock function with given fields:
func (_m *WorkflowMeta) GetCreationTimestamp() v1.Time {
	ret := _m.Called()

	var r0 v1.Time
	if rf, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}

	return r0
}

type WorkflowMeta_GetExecutionID struct {
	*mock.Call
}

func (_m WorkflowMeta_GetExecutionID) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *WorkflowMeta_GetExecutionID {
	return &WorkflowMeta_GetExecutionID{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetExecutionID() *WorkflowMeta_GetExecutionID {
	c := _m.On("GetExecutionID")
	return &WorkflowMeta_GetExecutionID{Call: c}
}

func (_m *WorkflowMeta) OnGetExecutionIDMatch(matchers ...interface{}) *WorkflowMeta_GetExecutionID {
	c := _m.On("GetExecutionID", matchers...)
	return &WorkflowMeta_GetExecutionID{Call: c}
}

// GetExecutionID provides a mock function with given fields:
func (_m *WorkflowMeta) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

type WorkflowMeta_GetK8sWorkflowID struct {
	*mock.Call
}

func (_m WorkflowMeta_GetK8sWorkflowID) Return(_a0 types.NamespacedName) *WorkflowMeta_GetK8sWorkflowID {
	return &WorkflowMeta_GetK8sWorkflowID{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetK8sWorkflowID() *WorkflowMeta_GetK8sWorkflowID {
	c := _m.On("GetK8sWorkflowID")
	return &WorkflowMeta_GetK8sWorkflowID{Call: c}
}

func (_m *WorkflowMeta) OnGetK8sWorkflowIDMatch(matchers ...interface{}) *WorkflowMeta_GetK8sWorkflowID {
	c := _m.On("GetK8sWorkflowID", matchers...)
	return &WorkflowMeta_GetK8sWorkflowID{Call: c}
}

// GetK8sWorkflowID provides a mock function with given fields:
func (_m *WorkflowMeta) GetK8sWorkflowID() types.NamespacedName {
	ret := _m.Called()

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

type WorkflowMeta_GetLabels struct {
	*mock.Call
}

func (_m WorkflowMeta_GetLabels) Return(_a0 map[string]string) *WorkflowMeta_GetLabels {
	return &WorkflowMeta_GetLabels{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetLabels() *WorkflowMeta_GetLabels {
	c := _m.On("GetLabels")
	return &WorkflowMeta_GetLabels{Call: c}
}

func (_m *WorkflowMeta) OnGetLabelsMatch(matchers ...interface{}) *WorkflowMeta_GetLabels {
	c := _m.On("GetLabels", matchers...)
	return &WorkflowMeta_GetLabels{Call: c}
}

// GetLabels provides a mock function with given fields:
func (_m *WorkflowMeta) GetLabels() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type WorkflowMeta_GetName struct {
	*mock.Call
}

func (_m WorkflowMeta_GetName) Return(_a0 string) *WorkflowMeta_GetName {
	return &WorkflowMeta_GetName{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetName() *WorkflowMeta_GetName {
	c := _m.On("GetName")
	return &WorkflowMeta_GetName{Call: c}
}

func (_m *WorkflowMeta) OnGetNameMatch(matchers ...interface{}) *WorkflowMeta_GetName {
	c := _m.On("GetName", matchers...)
	return &WorkflowMeta_GetName{Call: c}
}

// GetName provides a mock function with given fields:
func (_m *WorkflowMeta) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type WorkflowMeta_GetNamespace struct {
	*mock.Call
}

func (_m WorkflowMeta_GetNamespace) Return(_a0 string) *WorkflowMeta_GetNamespace {
	return &WorkflowMeta_GetNamespace{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetNamespace() *WorkflowMeta_GetNamespace {
	c := _m.On("GetNamespace")
	return &WorkflowMeta_GetNamespace{Call: c}
}

func (_m *WorkflowMeta) OnGetNamespaceMatch(matchers ...interface{}) *WorkflowMeta_GetNamespace {
	c := _m.On("GetNamespace", matchers...)
	return &WorkflowMeta_GetNamespace{Call: c}
}

// GetNamespace provides a mock function with given fields:
func (_m *WorkflowMeta) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type WorkflowMeta_GetOwnerReference struct {
	*mock.Call
}

func (_m WorkflowMeta_GetOwnerReference) Return(_a0 v1.OwnerReference) *WorkflowMeta_GetOwnerReference {
	return &WorkflowMeta_GetOwnerReference{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetOwnerReference() *WorkflowMeta_GetOwnerReference {
	c := _m.On("GetOwnerReference")
	return &WorkflowMeta_GetOwnerReference{Call: c}
}

func (_m *WorkflowMeta) OnGetOwnerReferenceMatch(matchers ...interface{}) *WorkflowMeta_GetOwnerReference {
	c := _m.On("GetOwnerReference", matchers...)
	return &WorkflowMeta_GetOwnerReference{Call: c}
}

// GetOwnerReference provides a mock function with given fields:
func (_m *WorkflowMeta) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

type WorkflowMeta_GetServiceAccountName struct {
	*mock.Call
}

func (_m WorkflowMeta_GetServiceAccountName) Return(_a0 string) *WorkflowMeta_GetServiceAccountName {
	return &WorkflowMeta_GetServiceAccountName{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnGetServiceAccountName() *WorkflowMeta_GetServiceAccountName {
	c := _m.On("GetServiceAccountName")
	return &WorkflowMeta_GetServiceAccountName{Call: c}
}

func (_m *WorkflowMeta) OnGetServiceAccountNameMatch(matchers ...interface{}) *WorkflowMeta_GetServiceAccountName {
	c := _m.On("GetServiceAccountName", matchers...)
	return &WorkflowMeta_GetServiceAccountName{Call: c}
}

// GetServiceAccountName provides a mock function with given fields:
func (_m *WorkflowMeta) GetServiceAccountName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type WorkflowMeta_IsInterruptible struct {
	*mock.Call
}

func (_m WorkflowMeta_IsInterruptible) Return(_a0 bool) *WorkflowMeta_IsInterruptible {
	return &WorkflowMeta_IsInterruptible{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMeta) OnIsInterruptible() *WorkflowMeta_IsInterruptible {
	c := _m.On("IsInterruptible")
	return &WorkflowMeta_IsInterruptible{Call: c}
}

func (_m *WorkflowMeta) OnIsInterruptibleMatch(matchers ...interface{}) *WorkflowMeta_IsInterruptible {
	c := _m.On("IsInterruptible", matchers...)
	return &WorkflowMeta_IsInterruptible{Call: c}
}

// IsInterruptible provides a mock function with given fields:
func (_m *WorkflowMeta) IsInterruptible() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
