// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// BaseNode is an autogenerated mock type for the BaseNode type
type BaseNode struct {
	mock.Mock
}

type BaseNode_GetID struct {
	*mock.Call
}

func (_m BaseNode_GetID) Return(_a0 string) *BaseNode_GetID {
	return &BaseNode_GetID{Call: _m.Call.Return(_a0)}
}

func (_m *BaseNode) OnGetID() *BaseNode_GetID {
	c_call := _m.On("GetID")
	return &BaseNode_GetID{Call: c_call}
}

func (_m *BaseNode) OnGetIDMatch(matchers ...interface{}) *BaseNode_GetID {
	c_call := _m.On("GetID", matchers...)
	return &BaseNode_GetID{Call: c_call}
}

// GetID provides a mock function with given fields:
func (_m *BaseNode) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type BaseNode_GetKind struct {
	*mock.Call
}

func (_m BaseNode_GetKind) Return(_a0 v1alpha1.NodeKind) *BaseNode_GetKind {
	return &BaseNode_GetKind{Call: _m.Call.Return(_a0)}
}

func (_m *BaseNode) OnGetKind() *BaseNode_GetKind {
	c_call := _m.On("GetKind")
	return &BaseNode_GetKind{Call: c_call}
}

func (_m *BaseNode) OnGetKindMatch(matchers ...interface{}) *BaseNode_GetKind {
	c_call := _m.On("GetKind", matchers...)
	return &BaseNode_GetKind{Call: c_call}
}

// GetKind provides a mock function with given fields:
func (_m *BaseNode) GetKind() v1alpha1.NodeKind {
	ret := _m.Called()

	var r0 v1alpha1.NodeKind
	if rf, ok := ret.Get(0).(func() v1alpha1.NodeKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.NodeKind)
	}

	return r0
}
