// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableTask is an autogenerated mock type for the ExecutableTask type
type ExecutableTask struct {
	mock.Mock
}

type ExecutableTask_CoreTask struct {
	*mock.Call
}

func (_m ExecutableTask_CoreTask) Return(_a0 *core.TaskTemplate) *ExecutableTask_CoreTask {
	return &ExecutableTask_CoreTask{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTask) OnCoreTask() *ExecutableTask_CoreTask {
	c_call := _m.On("CoreTask")
	return &ExecutableTask_CoreTask{Call: c_call}
}

func (_m *ExecutableTask) OnCoreTaskMatch(matchers ...interface{}) *ExecutableTask_CoreTask {
	c_call := _m.On("CoreTask", matchers...)
	return &ExecutableTask_CoreTask{Call: c_call}
}

// CoreTask provides a mock function with given fields:
func (_m *ExecutableTask) CoreTask() *core.TaskTemplate {
	ret := _m.Called()

	var r0 *core.TaskTemplate
	if rf, ok := ret.Get(0).(func() *core.TaskTemplate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TaskTemplate)
		}
	}

	return r0
}

type ExecutableTask_TaskType struct {
	*mock.Call
}

func (_m ExecutableTask_TaskType) Return(_a0 string) *ExecutableTask_TaskType {
	return &ExecutableTask_TaskType{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableTask) OnTaskType() *ExecutableTask_TaskType {
	c_call := _m.On("TaskType")
	return &ExecutableTask_TaskType{Call: c_call}
}

func (_m *ExecutableTask) OnTaskTypeMatch(matchers ...interface{}) *ExecutableTask_TaskType {
	c_call := _m.On("TaskType", matchers...)
	return &ExecutableTask_TaskType{Call: c_call}
}

// TaskType provides a mock function with given fields:
func (_m *ExecutableTask) TaskType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
