// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ExecutionTimeInfo is an autogenerated mock type for the ExecutionTimeInfo type
type ExecutionTimeInfo struct {
	mock.Mock
}

type ExecutionTimeInfo_GetLastUpdatedAt struct {
	*mock.Call
}

func (_m ExecutionTimeInfo_GetLastUpdatedAt) Return(_a0 *v1.Time) *ExecutionTimeInfo_GetLastUpdatedAt {
	return &ExecutionTimeInfo_GetLastUpdatedAt{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutionTimeInfo) OnGetLastUpdatedAt() *ExecutionTimeInfo_GetLastUpdatedAt {
	c_call := _m.On("GetLastUpdatedAt")
	return &ExecutionTimeInfo_GetLastUpdatedAt{Call: c_call}
}

func (_m *ExecutionTimeInfo) OnGetLastUpdatedAtMatch(matchers ...interface{}) *ExecutionTimeInfo_GetLastUpdatedAt {
	c_call := _m.On("GetLastUpdatedAt", matchers...)
	return &ExecutionTimeInfo_GetLastUpdatedAt{Call: c_call}
}

// GetLastUpdatedAt provides a mock function with given fields:
func (_m *ExecutionTimeInfo) GetLastUpdatedAt() *v1.Time {
	ret := _m.Called()

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

type ExecutionTimeInfo_GetStartedAt struct {
	*mock.Call
}

func (_m ExecutionTimeInfo_GetStartedAt) Return(_a0 *v1.Time) *ExecutionTimeInfo_GetStartedAt {
	return &ExecutionTimeInfo_GetStartedAt{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutionTimeInfo) OnGetStartedAt() *ExecutionTimeInfo_GetStartedAt {
	c_call := _m.On("GetStartedAt")
	return &ExecutionTimeInfo_GetStartedAt{Call: c_call}
}

func (_m *ExecutionTimeInfo) OnGetStartedAtMatch(matchers ...interface{}) *ExecutionTimeInfo_GetStartedAt {
	c_call := _m.On("GetStartedAt", matchers...)
	return &ExecutionTimeInfo_GetStartedAt{Call: c_call}
}

// GetStartedAt provides a mock function with given fields:
func (_m *ExecutionTimeInfo) GetStartedAt() *v1.Time {
	ret := _m.Called()

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

type ExecutionTimeInfo_GetStoppedAt struct {
	*mock.Call
}

func (_m ExecutionTimeInfo_GetStoppedAt) Return(_a0 *v1.Time) *ExecutionTimeInfo_GetStoppedAt {
	return &ExecutionTimeInfo_GetStoppedAt{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutionTimeInfo) OnGetStoppedAt() *ExecutionTimeInfo_GetStoppedAt {
	c_call := _m.On("GetStoppedAt")
	return &ExecutionTimeInfo_GetStoppedAt{Call: c_call}
}

func (_m *ExecutionTimeInfo) OnGetStoppedAtMatch(matchers ...interface{}) *ExecutionTimeInfo_GetStoppedAt {
	c_call := _m.On("GetStoppedAt", matchers...)
	return &ExecutionTimeInfo_GetStoppedAt{Call: c_call}
}

// GetStoppedAt provides a mock function with given fields:
func (_m *ExecutionTimeInfo) GetStoppedAt() *v1.Time {
	ret := _m.Called()

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}
