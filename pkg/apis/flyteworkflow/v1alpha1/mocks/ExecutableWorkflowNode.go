// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableWorkflowNode is an autogenerated mock type for the ExecutableWorkflowNode type
type ExecutableWorkflowNode struct {
	mock.Mock
}

type ExecutableWorkflowNode_GetLaunchPlanRefID struct {
	*mock.Call
}

func (_m ExecutableWorkflowNode_GetLaunchPlanRefID) Return(_a0 *v1alpha1.Identifier) *ExecutableWorkflowNode_GetLaunchPlanRefID {
	return &ExecutableWorkflowNode_GetLaunchPlanRefID{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableWorkflowNode) OnGetLaunchPlanRefID() *ExecutableWorkflowNode_GetLaunchPlanRefID {
	c_call := _m.On("GetLaunchPlanRefID")
	return &ExecutableWorkflowNode_GetLaunchPlanRefID{Call: c_call}
}

func (_m *ExecutableWorkflowNode) OnGetLaunchPlanRefIDMatch(matchers ...interface{}) *ExecutableWorkflowNode_GetLaunchPlanRefID {
	c_call := _m.On("GetLaunchPlanRefID", matchers...)
	return &ExecutableWorkflowNode_GetLaunchPlanRefID{Call: c_call}
}

// GetLaunchPlanRefID provides a mock function with given fields:
func (_m *ExecutableWorkflowNode) GetLaunchPlanRefID() *v1alpha1.Identifier {
	ret := _m.Called()

	var r0 *v1alpha1.Identifier
	if rf, ok := ret.Get(0).(func() *v1alpha1.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Identifier)
		}
	}

	return r0
}

type ExecutableWorkflowNode_GetSubWorkflowRef struct {
	*mock.Call
}

func (_m ExecutableWorkflowNode_GetSubWorkflowRef) Return(_a0 *string) *ExecutableWorkflowNode_GetSubWorkflowRef {
	return &ExecutableWorkflowNode_GetSubWorkflowRef{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableWorkflowNode) OnGetSubWorkflowRef() *ExecutableWorkflowNode_GetSubWorkflowRef {
	c_call := _m.On("GetSubWorkflowRef")
	return &ExecutableWorkflowNode_GetSubWorkflowRef{Call: c_call}
}

func (_m *ExecutableWorkflowNode) OnGetSubWorkflowRefMatch(matchers ...interface{}) *ExecutableWorkflowNode_GetSubWorkflowRef {
	c_call := _m.On("GetSubWorkflowRef", matchers...)
	return &ExecutableWorkflowNode_GetSubWorkflowRef{Call: c_call}
}

// GetSubWorkflowRef provides a mock function with given fields:
func (_m *ExecutableWorkflowNode) GetSubWorkflowRef() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}
