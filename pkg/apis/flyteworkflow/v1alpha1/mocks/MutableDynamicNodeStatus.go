// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/lyft/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MutableDynamicNodeStatus is an autogenerated mock type for the MutableDynamicNodeStatus type
type MutableDynamicNodeStatus struct {
	mock.Mock
}

type MutableDynamicNodeStatus_GetDynamicNodePhase struct {
	*mock.Call
}

func (_m MutableDynamicNodeStatus_GetDynamicNodePhase) Return(_a0 v1alpha1.DynamicNodePhase) *MutableDynamicNodeStatus_GetDynamicNodePhase {
	return &MutableDynamicNodeStatus_GetDynamicNodePhase{Call: _m.Call.Return(_a0)}
}

func (_m *MutableDynamicNodeStatus) OnGetDynamicNodePhase() *MutableDynamicNodeStatus_GetDynamicNodePhase {
	c := _m.On("GetDynamicNodePhase")
	return &MutableDynamicNodeStatus_GetDynamicNodePhase{Call: c}
}

func (_m *MutableDynamicNodeStatus) OnGetDynamicNodePhaseMatch(matchers ...interface{}) *MutableDynamicNodeStatus_GetDynamicNodePhase {
	c := _m.On("GetDynamicNodePhase", matchers...)
	return &MutableDynamicNodeStatus_GetDynamicNodePhase{Call: c}
}

// GetDynamicNodePhase provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) GetDynamicNodePhase() v1alpha1.DynamicNodePhase {
	ret := _m.Called()

	var r0 v1alpha1.DynamicNodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.DynamicNodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.DynamicNodePhase)
	}

	return r0
}

type MutableDynamicNodeStatus_GetDynamicNodeReason struct {
	*mock.Call
}

func (_m MutableDynamicNodeStatus_GetDynamicNodeReason) Return(_a0 string) *MutableDynamicNodeStatus_GetDynamicNodeReason {
	return &MutableDynamicNodeStatus_GetDynamicNodeReason{Call: _m.Call.Return(_a0)}
}

func (_m *MutableDynamicNodeStatus) OnGetDynamicNodeReason() *MutableDynamicNodeStatus_GetDynamicNodeReason {
	c := _m.On("GetDynamicNodeReason")
	return &MutableDynamicNodeStatus_GetDynamicNodeReason{Call: c}
}

func (_m *MutableDynamicNodeStatus) OnGetDynamicNodeReasonMatch(matchers ...interface{}) *MutableDynamicNodeStatus_GetDynamicNodeReason {
	c := _m.On("GetDynamicNodeReason", matchers...)
	return &MutableDynamicNodeStatus_GetDynamicNodeReason{Call: c}
}

// GetDynamicNodeReason provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) GetDynamicNodeReason() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetDynamicNodePhase provides a mock function with given fields: phase
func (_m *MutableDynamicNodeStatus) SetDynamicNodePhase(phase v1alpha1.DynamicNodePhase) {
	_m.Called(phase)
}

// SetDynamicNodeReason provides a mock function with given fields: reason
func (_m *MutableDynamicNodeStatus) SetDynamicNodeReason(reason string) {
	_m.Called(reason)
}
