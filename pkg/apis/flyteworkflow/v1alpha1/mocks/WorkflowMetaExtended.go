// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// MetaExtended is an autogenerated mock type for the MetaExtended type
type WorkflowMetaExtended struct {
	mock.Mock
}

type WorkflowMetaExtended_FindSubWorkflow struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_FindSubWorkflow) Return(_a0 v1alpha1.ExecutableSubWorkflow) *WorkflowMetaExtended_FindSubWorkflow {
	return &WorkflowMetaExtended_FindSubWorkflow{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnFindSubWorkflow(subID string) *WorkflowMetaExtended_FindSubWorkflow {
	c := _m.On("FindSubWorkflow", subID)
	return &WorkflowMetaExtended_FindSubWorkflow{Call: c}
}

func (_m *WorkflowMetaExtended) OnFindSubWorkflowMatch(matchers ...interface{}) *WorkflowMetaExtended_FindSubWorkflow {
	c := _m.On("FindSubWorkflow", matchers...)
	return &WorkflowMetaExtended_FindSubWorkflow{Call: c}
}

// FindSubWorkflow provides a mock function with given fields: subID
func (_m *WorkflowMetaExtended) FindSubWorkflow(subID string) v1alpha1.ExecutableSubWorkflow {
	ret := _m.Called(subID)

	var r0 v1alpha1.ExecutableSubWorkflow
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableSubWorkflow); ok {
		r0 = rf(subID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableSubWorkflow)
		}
	}

	return r0
}

type WorkflowMetaExtended_GetAnnotations struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetAnnotations) Return(_a0 map[string]string) *WorkflowMetaExtended_GetAnnotations {
	return &WorkflowMetaExtended_GetAnnotations{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetAnnotations() *WorkflowMetaExtended_GetAnnotations {
	c := _m.On("GetAnnotations")
	return &WorkflowMetaExtended_GetAnnotations{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetAnnotationsMatch(matchers ...interface{}) *WorkflowMetaExtended_GetAnnotations {
	c := _m.On("GetAnnotations", matchers...)
	return &WorkflowMetaExtended_GetAnnotations{Call: c}
}

// GetAnnotations provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetAnnotations() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type WorkflowMetaExtended_GetCreationTimestamp struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetCreationTimestamp) Return(_a0 v1.Time) *WorkflowMetaExtended_GetCreationTimestamp {
	return &WorkflowMetaExtended_GetCreationTimestamp{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetCreationTimestamp() *WorkflowMetaExtended_GetCreationTimestamp {
	c := _m.On("GetCreationTimestamp")
	return &WorkflowMetaExtended_GetCreationTimestamp{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetCreationTimestampMatch(matchers ...interface{}) *WorkflowMetaExtended_GetCreationTimestamp {
	c := _m.On("GetCreationTimestamp", matchers...)
	return &WorkflowMetaExtended_GetCreationTimestamp{Call: c}
}

// GetCreationTimestamp provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetCreationTimestamp() v1.Time {
	ret := _m.Called()

	var r0 v1.Time
	if rf, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}

	return r0
}

type WorkflowMetaExtended_GetExecutionID struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetExecutionID) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *WorkflowMetaExtended_GetExecutionID {
	return &WorkflowMetaExtended_GetExecutionID{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetExecutionID() *WorkflowMetaExtended_GetExecutionID {
	c := _m.On("GetExecutionID")
	return &WorkflowMetaExtended_GetExecutionID{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetExecutionIDMatch(matchers ...interface{}) *WorkflowMetaExtended_GetExecutionID {
	c := _m.On("GetExecutionID", matchers...)
	return &WorkflowMetaExtended_GetExecutionID{Call: c}
}

// GetExecutionID provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

type WorkflowMetaExtended_GetExecutionStatus struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetExecutionStatus) Return(_a0 v1alpha1.ExecutableWorkflowStatus) *WorkflowMetaExtended_GetExecutionStatus {
	return &WorkflowMetaExtended_GetExecutionStatus{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetExecutionStatus() *WorkflowMetaExtended_GetExecutionStatus {
	c := _m.On("GetExecutionStatus")
	return &WorkflowMetaExtended_GetExecutionStatus{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetExecutionStatusMatch(matchers ...interface{}) *WorkflowMetaExtended_GetExecutionStatus {
	c := _m.On("GetExecutionStatus", matchers...)
	return &WorkflowMetaExtended_GetExecutionStatus{Call: c}
}

// GetExecutionStatus provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetExecutionStatus() v1alpha1.ExecutableWorkflowStatus {
	ret := _m.Called()

	var r0 v1alpha1.ExecutableWorkflowStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableWorkflowStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableWorkflowStatus)
		}
	}

	return r0
}

type WorkflowMetaExtended_GetK8sWorkflowID struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetK8sWorkflowID) Return(_a0 types.NamespacedName) *WorkflowMetaExtended_GetK8sWorkflowID {
	return &WorkflowMetaExtended_GetK8sWorkflowID{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetK8sWorkflowID() *WorkflowMetaExtended_GetK8sWorkflowID {
	c := _m.On("GetK8sWorkflowID")
	return &WorkflowMetaExtended_GetK8sWorkflowID{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetK8sWorkflowIDMatch(matchers ...interface{}) *WorkflowMetaExtended_GetK8sWorkflowID {
	c := _m.On("GetK8sWorkflowID", matchers...)
	return &WorkflowMetaExtended_GetK8sWorkflowID{Call: c}
}

// GetK8sWorkflowID provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetK8sWorkflowID() types.NamespacedName {
	ret := _m.Called()

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

type WorkflowMetaExtended_GetLabels struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetLabels) Return(_a0 map[string]string) *WorkflowMetaExtended_GetLabels {
	return &WorkflowMetaExtended_GetLabels{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetLabels() *WorkflowMetaExtended_GetLabels {
	c := _m.On("GetLabels")
	return &WorkflowMetaExtended_GetLabels{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetLabelsMatch(matchers ...interface{}) *WorkflowMetaExtended_GetLabels {
	c := _m.On("GetLabels", matchers...)
	return &WorkflowMetaExtended_GetLabels{Call: c}
}

// GetLabels provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetLabels() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type WorkflowMetaExtended_GetName struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetName) Return(_a0 string) *WorkflowMetaExtended_GetName {
	return &WorkflowMetaExtended_GetName{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetName() *WorkflowMetaExtended_GetName {
	c := _m.On("GetName")
	return &WorkflowMetaExtended_GetName{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetNameMatch(matchers ...interface{}) *WorkflowMetaExtended_GetName {
	c := _m.On("GetName", matchers...)
	return &WorkflowMetaExtended_GetName{Call: c}
}

// GetName provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type WorkflowMetaExtended_GetNamespace struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetNamespace) Return(_a0 string) *WorkflowMetaExtended_GetNamespace {
	return &WorkflowMetaExtended_GetNamespace{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetNamespace() *WorkflowMetaExtended_GetNamespace {
	c := _m.On("GetNamespace")
	return &WorkflowMetaExtended_GetNamespace{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetNamespaceMatch(matchers ...interface{}) *WorkflowMetaExtended_GetNamespace {
	c := _m.On("GetNamespace", matchers...)
	return &WorkflowMetaExtended_GetNamespace{Call: c}
}

// GetNamespace provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type WorkflowMetaExtended_GetOwnerReference struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetOwnerReference) Return(_a0 v1.OwnerReference) *WorkflowMetaExtended_GetOwnerReference {
	return &WorkflowMetaExtended_GetOwnerReference{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetOwnerReference() *WorkflowMetaExtended_GetOwnerReference {
	c := _m.On("GetOwnerReference")
	return &WorkflowMetaExtended_GetOwnerReference{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetOwnerReferenceMatch(matchers ...interface{}) *WorkflowMetaExtended_GetOwnerReference {
	c := _m.On("GetOwnerReference", matchers...)
	return &WorkflowMetaExtended_GetOwnerReference{Call: c}
}

// GetOwnerReference provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

type WorkflowMetaExtended_GetServiceAccountName struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetServiceAccountName) Return(_a0 string) *WorkflowMetaExtended_GetServiceAccountName {
	return &WorkflowMetaExtended_GetServiceAccountName{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnGetServiceAccountName() *WorkflowMetaExtended_GetServiceAccountName {
	c := _m.On("GetServiceAccountName")
	return &WorkflowMetaExtended_GetServiceAccountName{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetServiceAccountNameMatch(matchers ...interface{}) *WorkflowMetaExtended_GetServiceAccountName {
	c := _m.On("GetServiceAccountName", matchers...)
	return &WorkflowMetaExtended_GetServiceAccountName{Call: c}
}

// GetServiceAccountName provides a mock function with given fields:
func (_m *WorkflowMetaExtended) GetServiceAccountName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type WorkflowMetaExtended_GetTask struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_GetTask) Return(_a0 v1alpha1.ExecutableTask, _a1 error) *WorkflowMetaExtended_GetTask {
	return &WorkflowMetaExtended_GetTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *WorkflowMetaExtended) OnGetTask(id string) *WorkflowMetaExtended_GetTask {
	c := _m.On("GetTask", id)
	return &WorkflowMetaExtended_GetTask{Call: c}
}

func (_m *WorkflowMetaExtended) OnGetTaskMatch(matchers ...interface{}) *WorkflowMetaExtended_GetTask {
	c := _m.On("GetTask", matchers...)
	return &WorkflowMetaExtended_GetTask{Call: c}
}

// GetTask provides a mock function with given fields: id
func (_m *WorkflowMetaExtended) GetTask(id string) (v1alpha1.ExecutableTask, error) {
	ret := _m.Called(id)

	var r0 v1alpha1.ExecutableTask
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableTask); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type WorkflowMetaExtended_IsInterruptible struct {
	*mock.Call
}

func (_m WorkflowMetaExtended_IsInterruptible) Return(_a0 bool) *WorkflowMetaExtended_IsInterruptible {
	return &WorkflowMetaExtended_IsInterruptible{Call: _m.Call.Return(_a0)}
}

func (_m *WorkflowMetaExtended) OnIsInterruptible() *WorkflowMetaExtended_IsInterruptible {
	c := _m.On("IsInterruptible")
	return &WorkflowMetaExtended_IsInterruptible{Call: c}
}

func (_m *WorkflowMetaExtended) OnIsInterruptibleMatch(matchers ...interface{}) *WorkflowMetaExtended_IsInterruptible {
	c := _m.On("IsInterruptible", matchers...)
	return &WorkflowMetaExtended_IsInterruptible{Call: c}
}

// IsInterruptible provides a mock function with given fields:
func (_m *WorkflowMetaExtended) IsInterruptible() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
