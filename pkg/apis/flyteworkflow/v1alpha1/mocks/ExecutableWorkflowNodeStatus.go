// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableWorkflowNodeStatus is an autogenerated mock type for the ExecutableWorkflowNodeStatus type
type ExecutableWorkflowNodeStatus struct {
	mock.Mock
}

type ExecutableWorkflowNodeStatus_GetExecutionError struct {
	*mock.Call
}

func (_m ExecutableWorkflowNodeStatus_GetExecutionError) Return(_a0 *core.ExecutionError) *ExecutableWorkflowNodeStatus_GetExecutionError {
	return &ExecutableWorkflowNodeStatus_GetExecutionError{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableWorkflowNodeStatus) OnGetExecutionError() *ExecutableWorkflowNodeStatus_GetExecutionError {
	c_call := _m.On("GetExecutionError")
	return &ExecutableWorkflowNodeStatus_GetExecutionError{Call: c_call}
}

func (_m *ExecutableWorkflowNodeStatus) OnGetExecutionErrorMatch(matchers ...interface{}) *ExecutableWorkflowNodeStatus_GetExecutionError {
	c_call := _m.On("GetExecutionError", matchers...)
	return &ExecutableWorkflowNodeStatus_GetExecutionError{Call: c_call}
}

// GetExecutionError provides a mock function with given fields:
func (_m *ExecutableWorkflowNodeStatus) GetExecutionError() *core.ExecutionError {
	ret := _m.Called()

	var r0 *core.ExecutionError
	if rf, ok := ret.Get(0).(func() *core.ExecutionError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExecutionError)
		}
	}

	return r0
}

type ExecutableWorkflowNodeStatus_GetWorkflowNodePhase struct {
	*mock.Call
}

func (_m ExecutableWorkflowNodeStatus_GetWorkflowNodePhase) Return(_a0 v1alpha1.WorkflowNodePhase) *ExecutableWorkflowNodeStatus_GetWorkflowNodePhase {
	return &ExecutableWorkflowNodeStatus_GetWorkflowNodePhase{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableWorkflowNodeStatus) OnGetWorkflowNodePhase() *ExecutableWorkflowNodeStatus_GetWorkflowNodePhase {
	c_call := _m.On("GetWorkflowNodePhase")
	return &ExecutableWorkflowNodeStatus_GetWorkflowNodePhase{Call: c_call}
}

func (_m *ExecutableWorkflowNodeStatus) OnGetWorkflowNodePhaseMatch(matchers ...interface{}) *ExecutableWorkflowNodeStatus_GetWorkflowNodePhase {
	c_call := _m.On("GetWorkflowNodePhase", matchers...)
	return &ExecutableWorkflowNodeStatus_GetWorkflowNodePhase{Call: c_call}
}

// GetWorkflowNodePhase provides a mock function with given fields:
func (_m *ExecutableWorkflowNodeStatus) GetWorkflowNodePhase() v1alpha1.WorkflowNodePhase {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowNodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowNodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowNodePhase)
	}

	return r0
}
