// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableSubWorkflowNodeStatus is an autogenerated mock type for the ExecutableSubWorkflowNodeStatus type
type ExecutableSubWorkflowNodeStatus struct {
	mock.Mock
}

type ExecutableSubWorkflowNodeStatus_GetPhase struct {
	*mock.Call
}

func (_m ExecutableSubWorkflowNodeStatus_GetPhase) Return(_a0 v1alpha1.WorkflowPhase) *ExecutableSubWorkflowNodeStatus_GetPhase {
	return &ExecutableSubWorkflowNodeStatus_GetPhase{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableSubWorkflowNodeStatus) OnGetPhase() *ExecutableSubWorkflowNodeStatus_GetPhase {
	c_call := _m.On("GetPhase")
	return &ExecutableSubWorkflowNodeStatus_GetPhase{Call: c_call}
}

func (_m *ExecutableSubWorkflowNodeStatus) OnGetPhaseMatch(matchers ...interface{}) *ExecutableSubWorkflowNodeStatus_GetPhase {
	c_call := _m.On("GetPhase", matchers...)
	return &ExecutableSubWorkflowNodeStatus_GetPhase{Call: c_call}
}

// GetPhase provides a mock function with given fields:
func (_m *ExecutableSubWorkflowNodeStatus) GetPhase() v1alpha1.WorkflowPhase {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowPhase
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowPhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowPhase)
	}

	return r0
}
