// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// ShardStrategy is an autogenerated mock type for the ShardStrategy type
type ShardStrategy struct {
	mock.Mock
}

type ShardStrategy_GetPodCount struct {
	*mock.Call
}

func (_m ShardStrategy_GetPodCount) Return(_a0 int) *ShardStrategy_GetPodCount {
	return &ShardStrategy_GetPodCount{Call: _m.Call.Return(_a0)}
}

func (_m *ShardStrategy) OnGetPodCount() *ShardStrategy_GetPodCount {
	c_call := _m.On("GetPodCount")
	return &ShardStrategy_GetPodCount{Call: c_call}
}

func (_m *ShardStrategy) OnGetPodCountMatch(matchers ...interface{}) *ShardStrategy_GetPodCount {
	c_call := _m.On("GetPodCount", matchers...)
	return &ShardStrategy_GetPodCount{Call: c_call}
}

// GetPodCount provides a mock function with given fields:
func (_m *ShardStrategy) GetPodCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type ShardStrategy_HashCode struct {
	*mock.Call
}

func (_m ShardStrategy_HashCode) Return(_a0 uint32, _a1 error) *ShardStrategy_HashCode {
	return &ShardStrategy_HashCode{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ShardStrategy) OnHashCode() *ShardStrategy_HashCode {
	c_call := _m.On("HashCode")
	return &ShardStrategy_HashCode{Call: c_call}
}

func (_m *ShardStrategy) OnHashCodeMatch(matchers ...interface{}) *ShardStrategy_HashCode {
	c_call := _m.On("HashCode", matchers...)
	return &ShardStrategy_HashCode{Call: c_call}
}

// HashCode provides a mock function with given fields:
func (_m *ShardStrategy) HashCode() (uint32, error) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ShardStrategy_UpdatePodSpec struct {
	*mock.Call
}

func (_m ShardStrategy_UpdatePodSpec) Return(_a0 error) *ShardStrategy_UpdatePodSpec {
	return &ShardStrategy_UpdatePodSpec{Call: _m.Call.Return(_a0)}
}

func (_m *ShardStrategy) OnUpdatePodSpec(pod *v1.PodSpec, containerName string, podIndex int) *ShardStrategy_UpdatePodSpec {
	c_call := _m.On("UpdatePodSpec", pod, containerName, podIndex)
	return &ShardStrategy_UpdatePodSpec{Call: c_call}
}

func (_m *ShardStrategy) OnUpdatePodSpecMatch(matchers ...interface{}) *ShardStrategy_UpdatePodSpec {
	c_call := _m.On("UpdatePodSpec", matchers...)
	return &ShardStrategy_UpdatePodSpec{Call: c_call}
}

// UpdatePodSpec provides a mock function with given fields: pod, containerName, podIndex
func (_m *ShardStrategy) UpdatePodSpec(pod *v1.PodSpec, containerName string, podIndex int) error {
	ret := _m.Called(pod, containerName, podIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.PodSpec, string, int) error); ok {
		r0 = rf(pod, containerName, podIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
