// Code generated by "enumer --type=ShardType --trimprefix=ShardType -json -yaml"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
)

const _ShardTypeName = "DomainProjectHash"

var _ShardTypeIndex = [...]uint8{0, 6, 13, 17}

func (i ShardType) String() string {
	if i < 0 || i >= ShardType(len(_ShardTypeIndex)-1) {
		return fmt.Sprintf("ShardType(%d)", i)
	}
	return _ShardTypeName[_ShardTypeIndex[i]:_ShardTypeIndex[i+1]]
}

var _ShardTypeValues = []ShardType{0, 1, 2}

var _ShardTypeNameToValueMap = map[string]ShardType{
	_ShardTypeName[0:6]:   0,
	_ShardTypeName[6:13]:  1,
	_ShardTypeName[13:17]: 2,
}

// ShardTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShardTypeString(s string) (ShardType, error) {
	if val, ok := _ShardTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShardType values", s)
}

// ShardTypeValues returns all values of the enum
func ShardTypeValues() []ShardType {
	return _ShardTypeValues
}

// IsAShardType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShardType) IsAShardType() bool {
	for _, v := range _ShardTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ShardType
func (i ShardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ShardType
func (i *ShardType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShardType should be a string, got %s", data)
	}

	var err error
	*i, err = ShardTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for ShardType
func (i ShardType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ShardType
func (i *ShardType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ShardTypeString(s)
	return err
}
