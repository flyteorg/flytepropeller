// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/event"

	mock "github.com/stretchr/testify/mock"
)

// EventRecorder is an autogenerated mock type for the EventRecorder type
type EventRecorder struct {
	mock.Mock
}

type EventRecorder_RecordNodeEvent struct {
	*mock.Call
}

func (_m EventRecorder_RecordNodeEvent) Return(_a0 error) *EventRecorder_RecordNodeEvent {
	return &EventRecorder_RecordNodeEvent{Call: _m.Call.Return(_a0)}
}

func (_m *EventRecorder) OnRecordNodeEvent(ctx context.Context, _a1 *event.NodeExecutionEvent) *EventRecorder_RecordNodeEvent {
	c_call := _m.On("RecordNodeEvent", ctx, _a1)
	return &EventRecorder_RecordNodeEvent{Call: c_call}
}

func (_m *EventRecorder) OnRecordNodeEventMatch(matchers ...interface{}) *EventRecorder_RecordNodeEvent {
	c_call := _m.On("RecordNodeEvent", matchers...)
	return &EventRecorder_RecordNodeEvent{Call: c_call}
}

// RecordNodeEvent provides a mock function with given fields: ctx, _a1
func (_m *EventRecorder) RecordNodeEvent(ctx context.Context, _a1 *event.NodeExecutionEvent) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.NodeExecutionEvent) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type EventRecorder_RecordTaskEvent struct {
	*mock.Call
}

func (_m EventRecorder_RecordTaskEvent) Return(_a0 error) *EventRecorder_RecordTaskEvent {
	return &EventRecorder_RecordTaskEvent{Call: _m.Call.Return(_a0)}
}

func (_m *EventRecorder) OnRecordTaskEvent(ctx context.Context, _a1 *event.TaskExecutionEvent) *EventRecorder_RecordTaskEvent {
	c_call := _m.On("RecordTaskEvent", ctx, _a1)
	return &EventRecorder_RecordTaskEvent{Call: c_call}
}

func (_m *EventRecorder) OnRecordTaskEventMatch(matchers ...interface{}) *EventRecorder_RecordTaskEvent {
	c_call := _m.On("RecordTaskEvent", matchers...)
	return &EventRecorder_RecordTaskEvent{Call: c_call}
}

// RecordTaskEvent provides a mock function with given fields: ctx, _a1
func (_m *EventRecorder) RecordTaskEvent(ctx context.Context, _a1 *event.TaskExecutionEvent) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.TaskExecutionEvent) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type EventRecorder_RecordWorkflowEvent struct {
	*mock.Call
}

func (_m EventRecorder_RecordWorkflowEvent) Return(_a0 error) *EventRecorder_RecordWorkflowEvent {
	return &EventRecorder_RecordWorkflowEvent{Call: _m.Call.Return(_a0)}
}

func (_m *EventRecorder) OnRecordWorkflowEvent(ctx context.Context, _a1 *event.WorkflowExecutionEvent) *EventRecorder_RecordWorkflowEvent {
	c_call := _m.On("RecordWorkflowEvent", ctx, _a1)
	return &EventRecorder_RecordWorkflowEvent{Call: c_call}
}

func (_m *EventRecorder) OnRecordWorkflowEventMatch(matchers ...interface{}) *EventRecorder_RecordWorkflowEvent {
	c_call := _m.On("RecordWorkflowEvent", matchers...)
	return &EventRecorder_RecordWorkflowEvent{Call: c_call}
}

// RecordWorkflowEvent provides a mock function with given fields: ctx, _a1
func (_m *EventRecorder) RecordWorkflowEvent(ctx context.Context, _a1 *event.WorkflowExecutionEvent) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.WorkflowExecutionEvent) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
