name: Pull Request

on:
  pull_request

jobs:
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: load-docker-cache
        name: Load Docker Cache
        uses: actions/cache@v1
        with:
          path: /tmp/tmp/docker-images
          key: /tmp/docker-images-${{ github.event.after }}
          restore-keys: |
            /tmp/docker-images-${{ github.event.before }}
            /tmp/docker-images-${{ github.event.pull_request.base.sha }}
      - name: Prime docker cache
        run: (docker load -i /tmp/tmp/docker-images/snapshot-builder.tar || true) && (docker load -i /tmp/tmp/docker-images/snapshot.tar || true)
      - name: Build dockerfile
        run: |
          docker build -t lyft/${{ github.event.repository.name }}:builder --target builder --cache-from=lyft/${{ github.event.repository.name }}:builder .
          docker build -t lyft/${{ github.event.repository.name }}:latest --cache-from=lyft/${{ github.event.repository.name }}:builder .

      - name: Tag and cache docker image
        run: mkdir -p /tmp/tmp/docker-images && docker save lyft/${{ github.event.repository.name }}:builder -o /tmp/tmp/docker-images/snapshot-builder.tar && docker save lyft/${{ github.event.repository.name }}:latest -o /tmp/tmp/docker-images/snapshot.tar

  endtoend:
    name: End to End tests
    runs-on: ubuntu-latest
    needs: [ build-docker ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: load-docker-cache
        name: Load Docker Cache
        uses: actions/cache@v1
        with:
          path: /tmp/tmp/docker-images
          key: /tmp/docker-images-${{ github.event.after }}
      - name: Prime docker cache
        run: docker load -i /tmp/tmp/docker-images/snapshot.tar || true
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"
      - name: End2End
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
          IMAGE_NAME=${{ github.event.repository.name }} IMAGE=lyft/${{ github.event.repository.name }}:latest make end2end_execute

  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [ build-docker ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: load-docker-cache
        name: Load Docker Cache
        uses: actions/cache@v1
        with:
          path: /tmp/tmp/docker-images
          key: /tmp/docker-images-${{ github.event.after }}
      - name: Prime docker cache
        run: docker load -i /tmp/tmp/docker-images/snapshot-builder.tar || true
      - uses: engineerd/setup-kind@v0.5.0
      - name: Integration
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
          IMAGE_NAME=${{ github.event.repository.name }} IMAGE=lyft/${{ github.event.repository.name }}:builder make k8s_integration_execute

  tests-lint:
    name: Run tests and lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Unit Tests
        uses: cedrickring/golang-action@1.5.2
        env:
          GO111MODULE: "on"
        with:
          args: make install && make test_unit_codecov
      - name: Push CodeCov
        uses: codecov/codecov-action@v1
        with:
          file: coverage.txt
          flags: unittests
          fail_ci_if_error: true
      - name: Benchmarks
        uses: cedrickring/golang-action@1.5.2
        env:
          GO111MODULE: "on"
        with:
          args: make install && make test_benchmark
      - name: Lint
        uses: cedrickring/golang-action@1.5.2
        env:
          GO111MODULE: "on"
        with:
          args: make install && make lint
