name: Master

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  # Duplicated from pull request workflow because sharing is not yet supported
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: load-docker-cache
        name: Load Docker Cache
        uses: actions/cache@v1
        with:
          path: /tmp/tmp/docker-images
          key: /tmp/docker-images-${{ github.event.after }}
          restore-keys: |
            /tmp/docker-images-${{ github.event.before }}
            /tmp/docker-images-${{ github.event.pull_request.base.sha }}
      - name: Prime docker cache
        run: (docker load -i /tmp/tmp/docker-images/snapshot-builder.tar || true) && (docker load -i /tmp/tmp/docker-images/snapshot.tar || true)
      - name: Build dockerfile
        run: |
          docker build -t flyteorg/${{ github.event.repository.name }}:builder --target builder --cache-from=flyteorg/${{ github.event.repository.name }}:builder .
          docker build -t flyteorg/${{ github.event.repository.name }}:latest --cache-from=flyteorg/${{ github.event.repository.name }}:builder .

      - name: Tag and cache docker image
        run: mkdir -p /tmp/tmp/docker-images && docker save flyteorg/${{ github.event.repository.name }}:builder -o /tmp/tmp/docker-images/snapshot-builder.tar && docker save flyteorg/${{ github.event.repository.name }}:latest -o /tmp/tmp/docker-images/snapshot.tar

  # Duplicated from pull request workflow because sharing is not yet supported
  endtoend:
    name: End to End tests
    runs-on: ubuntu-latest
    needs: [ build-docker ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: unionai/flytectl-setup-action@v0.0.1
        name: Setup flytectl
      - id: load-docker-cache
        name: Load Docker Cache
        uses: actions/cache@v1
        with:
          path: /tmp/tmp/docker-images
          key: /tmp/docker-images-${{ github.event.after }}
      - name: Create Sandbox Cluster
        run: |
          cp /tmp/tmp/docker-images/snapshot.tar snapshot.tar
          flytectl sandbox start --source=$(pwd)
          flytectl config init
      - name: Prime docker cache
        run: |
          flytectl sandbox exec -- docker load -i /root/snapshot.tar
      - name: Upgrade Helm charts
        run: |
          flytectl sandbox exec -- helm repo add flyteorg https://flyteorg.github.io/flyte
          flytectl sandbox exec -- helm repo update
          flytectl sandbox exec -- helm upgrade flyte -n flyte --kubeconfig=/etc/rancher/k3s/k3s.yaml flyteorg/flyte -f /flyteorg/share/flyte/values.yaml --set flytepropeller.image.repository=flyteorg/${{ github.event.repository.name }},flytepropeller.image.tag=latest
      - name: End2End
        env:
          KUBECONFIG: /home/runner/.flyte/k3s/k3s.yaml
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
          make end2end_execute

  bump-version:
    name: Bump Version
    if: github.event.commits[0].author.name != 'goreleaserbot'
    runs-on: ubuntu-latest
    # Only to ensure it can successfully build
    needs: [ endtoend, tests-lint ]
    outputs:
      version: ${{ steps.bump-version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Set branch name
        id: extract_branch
        run: echo "::set-output name=branch_name::$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}})"
      - name: Bump version and push tag
        id: bump-version
        uses: anothrNick/github-tag-action@1.17.2
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: ${{ steps.extract_branch.outputs.branch_name }}

  goreleaser:
    name: Goreleaser
    runs-on: ubuntu-latest
    needs: [ bump-version ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}

  push-github:
    name: Push to Github Registry
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Push Docker Image to Github Registry
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
          image_name: ${{ github.repository }}
          image_tag: latest,${{ github.sha }},${{ needs.bump-version.outputs.version }}
          push_git_tag: true
          registry: ghcr.io
          build_extra_args: "--compress=true"

  tests-lint:
    name: Run tests and lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Unit Tests
        uses: cedrickring/golang-action@1.5.2
        env:
          GO111MODULE: "on"
        with:
          args: make install && make test_unit_codecov
      - name: Push CodeCov
        uses: codecov/codecov-action@v1
        with:
          file: coverage.txt
          flags: unittests
          fail_ci_if_error: true
      - name: Benchmarks
        uses: cedrickring/golang-action@1.5.2
        env:
          GO111MODULE: "on"
        with:
          args: make install && make test_benchmark
      - name: Lint
        uses: cedrickring/golang-action@1.5.2
        env:
          GO111MODULE: "on"
        with:
          args: make install && make lint
